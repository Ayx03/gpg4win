m4_dnl                                                     -*-html-*-
m4_include(`template.m4')
m4_dnl $Id$

m4_define(`EN')
m4_define(`DE_FILE', `build-installer-gnulinux-de.html')

m4_define(`MAIN', `community')
m4_define(`TITLE', `Building Gpg4win under GNU/Linux')

PAGE_START

<div id="intro">
<h2>Building Gpg4win under GNU/Linux</h2>
<p>This example specifically describes how to create
a new Gpg4win installer on a Debian GNU/Linux 'Wheezy' 7.0.
In principle, any other Unix system could be used as well.</p>
<p>
You might find more recent instructions in the
<a href="https://wiki.gnupg.org/Gpg4win/build">GnuPG Wiki</a> and
in the README file in the Gpg4win source directory.
</p>
<p>
  <a href="build-installer.html">Back to overview on building installer</a>
</p>
</div>

<div id="main">

<h2>Create a new installer package</h2>

The character '#' indicates commands to be executed as administrator (root)
and '$' for commands to be executed as regular user.

<ol>

<li> Get the sources:<br>
     <em>$ git clone git://git.gnupg.org/gpg4win.git</em><br>
     or download the source code package gpg4win-n.n.n.tar.gz, unpack it and
     change to the directory gpg4win-n.n.n. We recommend to work
     with the GIT version if you want to do more that just update a single
     module for yourself.

<li> Install required packages listed in the README file in the source directory.<br>

<li> Download all necessary Gpg4win modules from Internet:<br>
     <em>$ cd packages</em><br>
     <em>$ sh download.sh</em><br>
     (takes some time, especially the first time)<br>
     <em>$ cd ..</em><br>

<li> If you work with the GIT version:<br>
     <em>$ ./autogen.sh</em><br>
     <em>$ ./autogen --build-w32</em><br>
     else:<br>
     <em>$ ./autogen --build-w32</em><br>

<li> Now build the Gpg4win installer package:<br>
     <em>$ make</em>
</ol>

<p>
That's all. The new installer package is here:<br>
<em>src/gpg4win-n.n.n.exe</em><br>
The corresponding source code packages (with the sources of all modules, very big!) is here:<br>
<em>src/gpg4win-src-n.n.n.exe</em><br>
</p>

<h2>Update a single module for Gpg4win</h2>

Fort this task you should have build at least once a new installer package as
described above. Consider now we want to update the module
<em>gnupg</em>.

<ol>
<li> First, remove the old version:<br>
     <em>$ cd packages</em><br>
     <em>$ rm gnupg-*</em><br>
<li> Then download the desired new release, e.g:<br>
     <em>$ wget ftp://ftp.gnupg.org/gnupg/gnupg-1.4.3.tar.bz2</em><br>
     <em>$ wget ftp://ftp.gnupg.org/gnupg/gnupg-1.4.3.tar.bz2.sig</em><br>
     <em>$ gpg --verify gnupg-1.4.3.tar.bz2.sig</em><br>
     Only continue if that latter command shows a valid signature.
     You will find further hints on this at the
     href="http://www.gnupg.org/download/integrity_check.html">GnuPG
     Website</a>.  If the module does not provide any signature you
     should ensure authenticity of the file with another reasonable method.
<li> Build a new installer:<br>
     <em>$ cd ..</em><br>
     <em>$ make clean</em><br>
     <em>$ ./autogen.sh --build-w32</em><br>
     <em>$ make</em>
</ol>

<p>
Attention: From now on your should not execute the script <em>download.sh</em>
anymore because it would revert to the previous (i.e. official) version of the module.
For a permanent activation of the new module version for the official Gpg4win
installer package, the following step is necessary.
</p>

<ol>
<li> Adapt file<br>
     <em>packages.current</em><br>
     accordingly for the new module version (read the head of this file about
     the syntax) and commit the changes.<br>
    <em>$ git commit packages.current</em>

<li> Create a patch for this commit:<br>
    <em>$ git format-patch HEAD~1</em>

<li>Send this patch to the develoment mailing list gpg4win-devel@wald.intevation.org
</ol>



<h2>Integrate a new module into Gpg4win</h2>

Hierf√ºr sollte man schon einmal ein Installationspaket wie oben beschrieben
For this task you should have at least once created a installer package
according to the description above using the GIT version.

<ol>
<li>For your new module 'MYMOD' first create constants in the file
    include/config.nsi.in by adding the following lines:<br>
    <em>@HAVE_PKG_MYMOD@</em><br>
    <em>!define gpg4win_pkg_mymod @gpg4win_pkg_mymod@</em><br>
    <em>!define gpg4win_pkg_mymod_version @gpg4win_pkg_mymod_version@</em><br>
    You will find various examples in this file, e.g. see 'HAVE_PKG_WINPT'.

<li>Write the NSIS installation script<br>
    <em>src/inst-mymod.nsi</em><br>
    In the same directory you will find many examples to learn from.

<li>Write the NSIS de-installation script<br>
    <em>src/uninst-mymod.nsi</em><br>
    In the same directory you will find many examples to learn from.

<li>Extend the NSIS main script<br>
    <em>src/inst-sections.nsi</em><br>
    with MYMOD. Do this analogous to existing entries
    and read the explanations in the comments.

<li>Now add rules for integration into the build process into the file<br>
    <em>configure.ac</em><br>
    For this you can use macros from the file<br>
    <em>m4/gpg4win.m4</em><br>
    Due to the already integrated modules there are plenty
    of examples given. A main distinction is between cross-compiled
    modules and those that have been compiled for Windows elsewhere
    and integrated as compiled binaries.

<li>Now update the package list<br>
    <em>packages/packages.current</em><br>
    as described above.

<li>Gpg4win has to be configured anew for the new module:<br>
     <em>$ ./autogen.sh</em><br>
     <em>$ ./autogen.sh --build-w32</em><br>

<li>The last step is to build the new package:<br>
     <em>$ make</em>
</ol>

<p>
The new installer package is here:<br>
<em>src/gpg4win-n.n.n.exe</em><br>
The corresponding source code packages (with the sources of all modules, very big!) is here:<br>
<em>src/gpg4win-src-n.n.n.exe</em><br>
</p>
</div>
