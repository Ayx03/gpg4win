#! /usr/bin/env bash

this_dir="$(readlink -f "$(dirname "$0")")"

if [ -f "${APPDIR}/GnuPG-VS-Desktop-VERSION" ]; then
    myname="GnuPG VS-Desktop "$(cat "${APPDIR}/GnuPG-VS-Desktop-VERSION")
else
    myname="GnuPG Desktop "$(cat "${APPDIR}/GnuPG-Desktop-VERSION")
fi

if [ "$1" = "--help" ]; then
    echo "$myname"
    cat <<EOF

Options:
  -c          Run an intercactive shell.
  -c command  Run command with optional arguments.
  --gui       Run the GUI with optional arguments.
  --debug     Enable debugging of the start script.
  --help      Print this help.
The default is to run the GUI with optional arguments.
EOF
    exit 0
fi
if [ "$1" = "--debug" ]; then
    shift
    set -x
fi

export PATH="${APPDIR}/usr/bin:${PATH}"
export XDG_DATA_DIRS="${APPDIR}/usr/share:${XDG_DATA_DIRS:-/usr/share}:/usr/share"
export XDG_CONFIG_DIRS="${APPDIR}/usr/etc/xdg:${XDG_CONFIG_DIRS:-/etc/xdg}:/etc/xdg"

# Allow GnuPG config scripts to detect the appimage install.  We can't
# rely on APPDIR because other appimages might come with their own
# gnupg version.  Change the value to "vsd" for a GnuPG VS-Desktop build.
if [ -f "${APPDIR}/GnuPG-VS-Desktop-VERSION" ]; then
   _gnupg_appimage=vsd
else
   _gnupg_appimage=generic
fi
export _gnupg_appimage

if [ -z "$SHELL" ]; then
    SHELL="$(grep '/bash$' /etc/shells 2>/dev/null)"
    if [ -z "$SHELL" ]; then
        export SHELL=/bin/bash
    fi
fi

if [ "$1" = "-c" -o "$1" = "-i" ]; then
    shift
    if [ ! -x "$SHELL" ]; then
        echo "No shell found" >&2
        exit 2
    fi
    if [ -n "$1" ]; then
        pgm="$SHELL"
        pgmargs="-c $@"
    else
        pgm="$SHELL"
        pgmargs=-i
        echo Welcome to "$myname"\! >&2
        echo "(type \"exit\" to leave)" >&2
        echo "" >&2
    fi
else
    # Ignore the optional --gui option
    if [ "$1" = "--gui" ]; then
        shift
    fi
    if [ -x "${this_dir}/usr/bin/kleopatra" ];then
        pgm="${this_dir}/usr/bin/kleopatra"
        pgmargs="$@"
    else
        echo "Kleopatra not found" >&2
        exit 2
    fi
fi

# Start gpg-agent launching a program.  gpg-agent will then watch for
# termination of the program and kill itself after this has been
# detected.  We also steal an existing socket so that already running
# system instances of gpg-agent are not anymore used.
"${this_dir}/usr/bin/gpg-agent" --steal-socket --daemon -- $pgm $pgmargs

echo Goodbye from "$myname"\! >&2
