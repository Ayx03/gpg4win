#! /bin/sh
patch -p1 -l -f $* < $0
exit $?

commit 1726c63ba424a3392a1cba5a993c1388f0c3eadc
Author: Andre Heinecke <aheinecke@intevation.de>
Date:   Tue Feb 2 13:39:27 2016 +0100

    Crudely remove KF5Auth depedency

    This is not intended for upstream

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 87f976c..43d447f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -36,7 +36,7 @@ ecm_setup_version(${KF5_VERSION} VARIABLE_PREFIX KCONFIGWIDGETS
                         PACKAGE_VERSION_FILE "${CMAKE_CURRENT_BINARY_DIR}/KF5ConfigWidgetsConfigVersion.cmake"
                         SOVERSION 5)

-find_package(KF5Auth ${KF5_DEP_VERSION} REQUIRED)
+find_package(KF5Auth ${KF5_DEP_VERSION})
 find_package(KF5CoreAddons ${KF5_DEP_VERSION} REQUIRED)
 find_package(KF5Codecs ${KF5_DEP_VERSION} REQUIRED)
 find_package(KF5Config ${KF5_DEP_VERSION} REQUIRED)
diff --git a/KF5ConfigWidgetsConfig.cmake.in b/KF5ConfigWidgetsConfig.cmake.in
index 9096da6..660db4c 100644
--- a/KF5ConfigWidgetsConfig.cmake.in
+++ b/KF5ConfigWidgetsConfig.cmake.in
@@ -1,6 +1,5 @@
 @PACKAGE_INIT@

-find_dependency(KF5Auth "@KF5_DEP_VERSION@")
 find_dependency(KF5Codecs "@KF5_DEP_VERSION@")
 find_dependency(KF5Config "@KF5_DEP_VERSION@")
 find_dependency(KF5WidgetsAddons "@KF5_DEP_VERSION@")
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 104b118..ebce4ec 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -32,7 +32,6 @@ target_link_libraries(KF5ConfigWidgets
     KF5::Codecs # KCodecActions uses KCharsets, KEncodingProber
     KF5::WidgetsAddons # For K*Action, KPage*, KViewStateSerializer, KAcceleratorManager, K*GuiItem
     KF5::ConfigGui # KStandardAction uses KStandardShortcut
-    KF5::Auth # KCModule uses KAuth::Action
   PRIVATE
     ${KCONFIGWIDGETS_QDBUS_LIBS} # KPasteTextAction talks to Klipper via DBus
     KF5::CoreAddons # KCModule uses KAboutData, KTipDialog uses KRandom
@@ -78,5 +77,5 @@ install(PROGRAMS preparetips5 DESTINATION ${KDE_INSTALL_BINDIR} )
 install( FILES entry.desktop  DESTINATION  ${KDE_INSTALL_LOCALEDIR}/en_US RENAME kf5_entry.desktop )

 include(ECMGeneratePriFile)
-ecm_generate_pri_file(BASE_NAME KConfigWidgets LIB_NAME KF5ConfigWidgets DEPS "KCodecs KWidgetsAddons KConfigGui KAuth" FILENAME_VAR PRI_FILENAME INCLUDE_INSTALL_DIR ${KDE_INSTALL_INCLUDEDIR_KF5}/KConfigWidgets)
+ecm_generate_pri_file(BASE_NAME KConfigWidgets LIB_NAME KF5ConfigWidgets DEPS "KCodecs KWidgetsAddons KConfigGui" FILENAME_VAR PRI_FILENAME INCLUDE_INSTALL_DIR ${KDE_INSTALL_INCLUDEDIR_KF5}/KConfigWidgets)
 install(FILES ${PRI_FILENAME} DESTINATION ${ECM_MKSPECS_INSTALL_DIR})
diff --git a/src/kcmodule.cpp b/src/kcmodule.cpp
index db6c966..cfa3ac9 100644
--- a/src/kcmodule.cpp
+++ b/src/kcmodule.cpp
@@ -32,7 +32,9 @@
 #include <kconfigskeleton.h>
 #include <kconfigdialogmanager.h>
 #include <klocalizedstring.h>
+#if 0
 #include <kauthexecutejob.h>
+#endif

 class KCModulePrivate
 {
@@ -43,7 +45,9 @@ public:
         _useRootOnlyMessage(false),
         _firstshow(true),
         _needsAuthorization(false),
+#if 0
         _authAction(),
+#endif
         _unmanagedWidgetChangeState(false)
     { }

@@ -59,7 +63,9 @@ public:
     bool _firstshow : 1;

     bool  _needsAuthorization : 1;
+#if 0
     KAuth::Action _authAction;
+#endif

     // this member is used to record the state on non-automatically
     // managed widgets, allowing for mixed KConfigXT-drive and manual
@@ -118,6 +124,7 @@ KConfigDialogManager *KCModule::addConfig(KConfigSkeleton *config, QWidget *widg
     return manager;
 }

+#if 0
 void KCModule::setNeedsAuthorization(bool needsAuth)
 {
     d->_needsAuthorization = needsAuth;
@@ -173,6 +180,7 @@ void KCModule::authStatusChanged(KAuth::Action::AuthStatus status)

     qDebug() << useRootOnlyMessage();
 }
+#endif

 KCModule::~KCModule()
 {
diff --git a/src/kcmodule.h b/src/kcmodule.h
index b01c3dc..e77b465 100644
--- a/src/kcmodule.h
+++ b/src/kcmodule.h
@@ -25,7 +25,9 @@

 #include <kconfigwidgets_export.h>

+#if 0
 #include <kauthaction.h>
+#endif

 #include <QVariant>
 #include <QWidget>
@@ -197,6 +199,7 @@ public:
      */
     QList<KConfigDialogManager *> configs() const;

+#if 0
     /**
      * @brief Set if the module's save() method requires authorization to be executed.
      *
@@ -241,6 +244,7 @@ public:
      * @return The action that has to be authorized to execute the save() method.
      */
     KAuth::Action authAction() const;
+#endif

     /**
      * Returns the value set by setExportText();
@@ -378,10 +382,12 @@ protected Q_SLOTS:
      */
     void widgetChanged();

+#if 0
     /**
      * The status of the auth action, if one, has changed
      */
     void authStatusChanged(KAuth::Action::AuthStatus status);
+#endif

 protected:
