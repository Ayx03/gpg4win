#! /bin/sh
patch -p1 -f -l $* < $0
exit $?

diff -Nru qtbase-5.6.1.orig/src/corelib/global/global.pri qtbase-5.6.1/src/corelib/global/global.pri
--- qtbase-5.6.1.orig/src/corelib/global/global.pri     2016-07-22 15:11:23.303466531 +0200
+++ qtbase-5.6.1/src/corelib/global/global.pri  2016-07-22 15:11:49.940044214 +0200
@@ -10,6 +10,7 @@
         global/qnumeric_p.h \
         global/qnumeric.h \
         global/qglobalstatic.h \
+        global/qlibraryinfo_p.h \
         global/qlibraryinfo.h \
         global/qlogging.h \
         global/qtypeinfo.h \
diff -Nru qtbase-5.6.1.orig/src/corelib/global/qlibraryinfo.cpp qtbase-5.6.1/src/corelib/global/qlibraryinfo.cpp
--- qtbase-5.6.1.orig/src/corelib/global/qlibraryinfo.cpp       2016-07-22 15:11:23.303466531 +0200
+++ qtbase-5.6.1/src/corelib/global/qlibraryinfo.cpp    2016-07-22 15:11:49.940044214 +0200
@@ -38,6 +38,7 @@
 #include "qsettings.h"
 #include "qlibraryinfo.h"
 #include "qscopedpointer.h"
+#include "qlibraryinfo_p.h"

 #ifdef QT_BUILD_QMAKE
 QT_BEGIN_NAMESPACE
@@ -77,37 +78,33 @@
 };
 Q_GLOBAL_STATIC(QLibrarySettings, qt_library_settings)

-class QLibraryInfoPrivate
-{
-public:
-    static QSettings *findConfiguration();
 #ifdef QT_BUILD_QMAKE
-    static bool haveGroup(QLibraryInfo::PathGroup group)
-    {
-        QLibrarySettings *ls = qt_library_settings();
-        return ls ? (group == QLibraryInfo::EffectiveSourcePaths
-                     ? ls->haveEffectiveSourcePaths
-                     : group == QLibraryInfo::EffectivePaths
-                       ? ls->haveEffectivePaths
-                       : group == QLibraryInfo::DevicePaths
-                         ? ls->haveDevicePaths
-                         : ls->havePaths) : false;
-    }
+bool QLibraryInfoPrivate::haveGroup(QLibraryInfo::PathGroup group)
+{
+    QLibrarySettings *ls = qt_library_settings();
+    return ls ? (group == QLibraryInfo::EffectiveSourcePaths
+                    ? ls->haveEffectiveSourcePaths
+                    : group == QLibraryInfo::EffectivePaths
+                    ? ls->haveEffectivePaths
+                    : group == QLibraryInfo::DevicePaths
+                        ? ls->haveDevicePaths
+                        : ls->havePaths) : false;
+}
 #endif
-    static QSettings *configuration()
-    {
-        QLibrarySettings *ls = qt_library_settings();
-        if (ls) {
+QSettings *QLibraryInfoPrivate::configuration()
+{
+    QLibrarySettings *ls = qt_library_settings();
+    if (ls) {
 #ifndef QT_BUILD_QMAKE
-            if (ls->reloadOnQAppAvailable && QCoreApplication::instance() != 0)
-                ls->load();
+        if (ls->reloadOnQAppAvailable && QCoreApplication::instance() != 0)
+            ls->load();
 #endif
-            return ls->settings.data();
-        } else {
-            return 0;
-        }
+        return ls->settings.data();
+    } else {
+        return 0;
     }
-};
+}
+

 static const char platformsSection[] = "Platforms";

diff -Nru qtbase-5.6.1.orig/src/corelib/global/qlibraryinfo_p.h qtbase-5.6.1/src/corelib/global/qlibraryinfo_p.h
--- qtbase-5.6.1.orig/src/corelib/global/qlibraryinfo_p.h       1970-01-01 01:00:00.000000000 +0100
+++ qtbase-5.6.1/src/corelib/global/qlibraryinfo_p.h    2016-07-22 15:11:49.940044214 +0200
@@ -0,0 +1,61 @@
+/****************************************************************************
+**
+** Copyright (C) 2015 The Qt Company Ltd.
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see http://www.qt.io/terms-conditions. For further
+** information use the contact form at http://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** As a special exception, The Qt Company gives you certain additional
+** rights. These rights are described in The Qt Company LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QLIBRARYINFO_P_H
+#define QLIBRARYINFO_P_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include "qsettings.h"
+#include "qlibraryinfo.h"
+
+class QLibraryInfoPrivate
+{
+public:
+    static QSettings *findConfiguration();
+#ifdef QT_BUILD_QMAKE
+    static bool haveGroup(QLibraryInfo::PathGroup group);
+#endif
+    static QSettings *configuration();
+};
+
+#endif
\ No newline at end of file
diff -Nru qtbase-5.6.1.orig/src/corelib/io/qstandardpaths.cpp qtbase-5.6.1/src/corelib/io/qstandardpaths.cpp
--- qtbase-5.6.1.orig/src/corelib/io/qstandardpaths.cpp 2016-07-22 15:11:23.307466618 +0200
+++ qtbase-5.6.1/src/corelib/io/qstandardpaths.cpp      2016-07-22 15:12:52.629403686 +0200
@@ -41,6 +41,14 @@
 #include <qcoreapplication.h>
 #endif

+#if !defined(QT_BUILD_QMAKE) && !defined(QT_NO_SETTINGS) && !defined(QT_BOOTSTRAPPED)
+#include "../global/qlibraryinfo_p.h"
+#include <qsettings.h>
+#endif
+#ifdef Q_OS_WIN
+#include <windows.h>
+#endif
+
 #ifndef QT_NO_STANDARDPATHS

 QT_BEGIN_NAMESPACE
@@ -655,6 +663,55 @@
     return qsp_testMode;
 }

+static const char standardPathsSection[] = "StandardPaths";
+
+QString QStandardPaths::presetLocation(StandardLocation type)
+{
+#if !defined(QT_BUILD_QMAKE) && !defined(QT_NO_SETTINGS) && !defined(QT_BOOTSTRAPPED)
+    QStringList locations = QStringList()   << QStringLiteral("DesktopLocation")
+                                            << QStringLiteral("DocumentsLocation")
+                                            << QStringLiteral("FontsLocation")
+                                            << QStringLiteral("ApplicationsLocation")
+                                            << QStringLiteral("MusicLocation")
+                                            << QStringLiteral("MoviesLocation")
+                                            << QStringLiteral("PicturesLocation")
+                                            << QStringLiteral("TempLocation")
+                                            << QStringLiteral("HomeLocation")
+                                            << QStringLiteral("DataLocation")
+                                            << QStringLiteral("CacheLocation")
+                                            << QStringLiteral("GenericDataLocation")
+                                            << QStringLiteral("RuntimeLocation")
+                                            << QStringLiteral("ConfigLocation")
+                                            << QStringLiteral("DownloadLocation")
+                                            << QStringLiteral("GenericCacheLocation")
+                                            << QStringLiteral("GenericConfigLocation")
+                                            << QStringLiteral("AppDataLocation")
+                                            << QStringLiteral("AppConfigLocation")
+                                            << QStringLiteral("AppLocalDataLocation");
+
+    QScopedPointer<const QSettings> settings(QLibraryInfoPrivate::findConfiguration());
+    if (!settings.isNull()) {
+        QString key = QLatin1String(standardPathsSection);
+        key += QLatin1Char('/');
+        key += locations[type];
+        const QString value = settings->value(key).toString();
+#ifdef Q_OS_WIN
+        if (value.isEmpty())
+#endif
+          return value;
+#ifdef Q_OS_WIN
+        wchar_t expandedPath[MAX_PATH] = {0};
+        if (ExpandEnvironmentStrings((wchar_t*)value.utf16(), expandedPath, MAX_PATH)) {
+            return QString::fromWCharArray(expandedPath).replace("\\", "//");
+        }
+        return value;
+#endif
+    }
+#endif // !QT_BUILD_QMAKE && !QT_NO_SETTINGS
+
+    return QString();
+}
+

 QT_END_NAMESPACE

diff -Nru qtbase-5.6.1.orig/src/corelib/io/qstandardpaths.h qtbase-5.6.1/src/corelib/io/qstandardpaths.h
--- qtbase-5.6.1.orig/src/corelib/io/qstandardpaths.h   2016-07-22 15:11:23.307466618 +0200
+++ qtbase-5.6.1/src/corelib/io/qstandardpaths.h        2016-07-22 15:11:49.940044214 +0200
@@ -92,6 +92,8 @@
     static bool isTestModeEnabled();

 private:
+    static QString presetLocation(StandardLocation type);
+
     // prevent construction
     QStandardPaths();
     ~QStandardPaths();
diff -Nru qtbase-5.6.1.orig/src/corelib/io/qstandardpaths_mac.mm qtbase-5.6.1/src/corelib/io/qstandardpaths_mac.mm
--- qtbase-5.6.1.orig/src/corelib/io/qstandardpaths_mac.mm      2016-07-22 15:11:23.307466618 +0200
+++ qtbase-5.6.1/src/corelib/io/qstandardpaths_mac.mm   2016-07-22 15:11:49.940044214 +0200
@@ -138,6 +138,10 @@

 QString QStandardPaths::writableLocation(StandardLocation type)
 {
+    const QString result = QStandardPaths::presetLocation(type);
+    if(!result.isEmpty())
+        return result;
+
     if (isTestModeEnabled()) {
         const QString qttestDir = QDir::homePath() + QLatin1String("/.qttest");
         QString path;
diff -Nru qtbase-5.6.1.orig/src/corelib/io/qstandardpaths_win.cpp qtbase-5.6.1/src/corelib/io/qstandardpaths_win.cpp
--- qtbase-5.6.1.orig/src/corelib/io/qstandardpaths_win.cpp     2016-07-22 15:11:23.307466618 +0200
+++ qtbase-5.6.1/src/corelib/io/qstandardpaths_win.cpp  2016-07-22 15:13:41.682467339 +0200
@@ -203,7 +203,9 @@

 QString QStandardPaths::writableLocation(StandardLocation type)
 {
-    QString result;
+    QString result = QStandardPaths::presetLocation(type);
+    if (!result.isEmpty())
+        return result;
     switch (type) {
     case DownloadLocation:
         result = sHGetKnownFolderPath(qCLSID_FOLDERID_Downloads, type);
