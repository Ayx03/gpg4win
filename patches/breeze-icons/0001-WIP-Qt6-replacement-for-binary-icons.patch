#! /bin/sh
patch -p1 -l -f $* < $0
exit $?

From a5e8ff985321623530ddba40d7e389e9ab1bc35e Mon Sep 17 00:00:00 2001
From: Andre Heinecke <aheinecke@gnupg.org>
Date: Mon, 26 Feb 2024 11:49:06 +0100
Subject: [PATCH] WIP: Qt6 replacement for binary icons

---
 CMakeLists.txt                     |  84 ++++++++++++++++++-----
 tools/CMakeLists.txt               |  10 +++
 qrcAlias.cpp => tools/qrcAlias.cpp |   0
 tools/subsetBinaryIcons.cpp        | 104 +++++++++++++++++++++++++++++
 4 files changed, 180 insertions(+), 18 deletions(-)
 create mode 100644 tools/CMakeLists.txt
 rename qrcAlias.cpp => tools/qrcAlias.cpp (100%)
 create mode 100644 tools/subsetBinaryIcons.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 458ad6ba..2c775c96 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -67,11 +67,37 @@ add_feature_info("Icon generation" ${WITH_ICON_GENERATION} "for 24x24 and symbol
 option(BINARY_ICONS_RESOURCE "Install Qt binary resource files containing breeze icons (breeze-icons.rcc, breeze-icons-dark.rcc)" OFF)
 option(SKIP_INSTALL_ICONS "Skip installing the icons files" OFF)
 option(ICONS_LIBRARY "Install a library including the breeze & breeze dark icons as resources & functions to use them." OFF)
+set(ICON_SUBSET_INCLUDE_FILE "" CACHE FILEPATH "Only include icons with completeBaseName as specified in the file mentioned here (absolute path)")

 if(BINARY_ICONS_RESOURCE OR ICONS_LIBRARY)
-    find_package(Qt6 NO_MODULE REQUIRED Core)
-    add_executable(qrcAlias qrcAlias.cpp)
-    target_link_libraries(qrcAlias PUBLIC Qt6::Core)
+    if (CMAKE_CROSSCOMPILING)
+        if (NOT KF6_HOST_TOOLING)
+            message(FATAL_ERROR "Please provide a prefix with a native Qt build and pass -DKF6_HOST_TOOLING=path or disable BINARY_ICONS_RESOURCE")
+        endif()
+
+        # search native tooling prefix
+        string(FIND ${KF6_HOST_TOOLING} /lib idx)
+        string(SUBSTRING ${KF6_HOST_TOOLING} 0 ${idx} NATIVE_PREFIX)
+        message(STATUS "Building qrcAlias against ${NATIVE_PREFIX}")
+
+        include(ExternalProject)
+        ExternalProject_Add(native_tools
+                            SOURCE_DIR ${CMAKE_SOURCE_DIR}/tools
+                            CMAKE_ARGS -DCMAKE_PREFIX_PATH=${NATIVE_PREFIX}
+                                -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}
+                            INSTALL_COMMAND ""
+                           )
+        add_executable(qrcAlias IMPORTED GLOBAL)
+        add_executable(iconSubset IMPORTED GLOBAL)
+        add_dependencies(qrcAlias native_tools)
+        add_dependencies(iconSubset native_tools)
+        set_target_properties(qrcAlias PROPERTIES IMPORTED_LOCATION
+            ${CMAKE_BINARY_DIR}/native_tools-prefix/src/native_tools-build/qrcAlias)
+        set_target_properties(iconSubset PROPERTIES IMPORTED_LOCATION
+            ${CMAKE_BINARY_DIR}/native_tools-prefix/src/native_tools-build/iconSubset)
+    else()
+        add_subdirectory (tools)
+    endif()

 function(generate_binary_resource target outfile)
     set(RESOURCES_WORKING_DIR ${CMAKE_CURRENT_BINARY_DIR}/res)
@@ -90,21 +116,43 @@ function(generate_binary_resource target outfile)
     add_custom_target(breeze-${target}-mkdir
         COMMAND ${CMAKE_COMMAND} -E make_directory ${RESOURCES_WORKING_DIR}
     )
-    add_custom_command(OUTPUT ${RESOURCE_FILE}
-        COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR} ${RESOURCES_WORKING_DIR}
-        COMMAND ${CMAKE_COMMAND} -E remove
-            ${RESOURCE_FILE}
-            ${RESOURCE_FILE}.depends
-            ${RESOURCES_WORKING_DIR}/.gitignore
-            ${RESOURCES_WORKING_DIR}/CMakeLists.txt
-        COMMAND ${QT_RCC_EXECUTABLE} --project -o ${CMAKE_CURRENT_BINARY_DIR}/tmp.qrc
-        COMMAND ${CMAKE_COMMAND} -E env
-            ${pathVarName}=$<TARGET_FILE_DIR:Qt6::Core>
-            $<TARGET_FILE:qrcAlias> -i ${CMAKE_CURRENT_BINARY_DIR}/tmp.qrc -o ${RESOURCE_FILE}
-
-        WORKING_DIRECTORY ${RESOURCES_WORKING_DIR}
-        DEPENDS breeze-${target}-mkdir
-    )
+    if (ICON_SUBSET_INCLUDE_FILE)
+       set (_icon_subset_include_list -I "${ICON_SUBSET_INCLUDE_FILE}")
+       add_custom_command(OUTPUT ${RESOURCE_FILE}
+           COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR} ${RESOURCES_WORKING_DIR}
+           COMMAND ${CMAKE_COMMAND} -E remove
+               ${RESOURCE_FILE}
+               ${RESOURCE_FILE}.depends
+               ${RESOURCES_WORKING_DIR}/.gitignore
+               ${RESOURCES_WORKING_DIR}/CMakeLists.txt
+           COMMAND ${QT_RCC_EXECUTABLE} --project -o ${CMAKE_CURRENT_BINARY_DIR}/tmp.qrc
+           COMMAND ${CMAKE_COMMAND} -E env
+               ${pathVarName}=$<TARGET_FILE_DIR:Qt6::Core>
+               $<TARGET_FILE:iconSubset> -i ${CMAKE_CURRENT_BINARY_DIR}/tmp.qrc -o ${CMAKE_CURRENT_BINARY_DIR}/tmp2.qrc ${_icon_subset_include_list}
+           COMMAND ${CMAKE_COMMAND} -E env
+               ${pathVarName}=$<TARGET_FILE_DIR:Qt6::Core>
+               $<TARGET_FILE:qrcAlias> -i ${CMAKE_CURRENT_BINARY_DIR}/tmp2.qrc -o ${RESOURCE_FILE}
+
+           WORKING_DIRECTORY ${RESOURCES_WORKING_DIR}
+           DEPENDS breeze-${target}-mkdir
+       )
+    else()
+       add_custom_command(OUTPUT ${RESOURCE_FILE}
+       COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR} ${RESOURCES_WORKING_DIR}
+       COMMAND ${CMAKE_COMMAND} -E remove
+           ${RESOURCE_FILE}
+           ${RESOURCE_FILE}.depends
+           ${RESOURCES_WORKING_DIR}/.gitignore
+           ${RESOURCES_WORKING_DIR}/CMakeLists.txt
+       COMMAND ${QT_RCC_EXECUTABLE} --project -o ${CMAKE_CURRENT_BINARY_DIR}/tmp.qrc
+       COMMAND ${CMAKE_COMMAND} -E env
+           ${pathVarName}=$<TARGET_FILE_DIR:Qt6::Core>
+           $<TARGET_FILE:qrcAlias> -i ${CMAKE_CURRENT_BINARY_DIR}/tmp.qrc -o ${RESOURCE_FILE}
+
+       WORKING_DIRECTORY ${RESOURCES_WORKING_DIR}
+       DEPENDS breeze-${target}-mkdir
+       )
+    endif()
     add_custom_command(OUTPUT ${BINARY_RESOURCE_FILE}
         COMMAND ${QT_RCC_EXECUTABLE} --binary
                     -o ${BINARY_RESOURCE_FILE}
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
new file mode 100644
index 00000000..669b74f0
--- /dev/null
+++ b/tools/CMakeLists.txt
@@ -0,0 +1,10 @@
+cmake_minimum_required(VERSION 3.5)
+
+# This lives in a subdirectory to make it easy to switch
+# the toolchain for cross compile.
+
+find_package(Qt6 NO_MODULE REQUIRED Core)
+add_executable(qrcAlias qrcAlias.cpp)
+target_link_libraries(qrcAlias PUBLIC Qt6::Core)
+add_executable(iconSubset subsetBinaryIcons.cpp)
+target_link_libraries(iconSubset PUBLIC Qt6::Core)
diff --git a/qrcAlias.cpp b/tools/qrcAlias.cpp
similarity index 100%
rename from qrcAlias.cpp
rename to tools/qrcAlias.cpp
diff --git a/tools/subsetBinaryIcons.cpp b/tools/subsetBinaryIcons.cpp
new file mode 100644
index 00000000..407a1754
--- /dev/null
+++ b/tools/subsetBinaryIcons.cpp
@@ -0,0 +1,104 @@
+/* This file is part of the KDE libraries
+ * SPDX-FileCopyrightText: 2016 Kåre Särs <kare.sars@iki.fi>
+ * SPDX-FileCopyrightText: 2023 g10 Code GmbH
+ * SPDX-FileContributor: Sune Stolborg Vuorela <sune@vuorela.dk>
+ * SPDX-License-Identifier: LGPL-2.0-or-later
+ */
+#include <QCommandLineParser>
+#include <QCoreApplication>
+#include <QDebug>
+#include <QFile>
+#include <QFileInfo>
+#include <QRegularExpression>
+#include <QString>
+
+int parseFile(const QString &infile, const QString &outfile, const QStringList &includeFilter)
+{
+    QFile in(infile);
+    QFile out(outfile);
+    static QRegularExpression imageReg(QStringLiteral("<file>(.*\\.(?:svg|png|gif|ico))</file>"));
+
+    if (!in.open(QIODevice::ReadOnly)) {
+        qWarning() << "Failed to open" << infile;
+        return -1;
+    }
+    if (!out.open(QIODevice::WriteOnly)) {
+        qWarning() << "Failed to create" << outfile;
+        return -2;
+    }
+
+    while (in.bytesAvailable()) {
+        const QString line = QString::fromLocal8Bit(in.readLine());
+        const QRegularExpressionMatch match = imageReg.match(line);
+        if (!match.hasMatch()) {
+            // qDebug() << "No Match: " << line;
+            out.write(qPrintable(line));
+            continue;
+        }
+
+        const QFileInfo info(match.captured(1));
+        if (!includeFilter.contains(info.completeBaseName())) {
+            continue;
+        }
+        out.write(qPrintable(line));
+    }
+    return 0;
+}
+
+static QStringList parseIncludeList(const QString &path)
+{
+    QStringList items;
+    QFile in(path);
+    if (!in.open(QIODevice::ReadOnly)) {
+        qWarning() << "failed to open" << path;
+        return {};
+    }
+    while (in.bytesAvailable()) {
+        const QString line = QString::fromLocal8Bit(in.readLine()).trimmed();
+        if (line.startsWith(QLatin1Char('#'))) {
+            continue;
+        }
+        items.push_back(line);
+    }
+    return items;
+}
+
+int main(int argc, char *argv[])
+{
+    QCoreApplication app(argc, argv);
+
+    QCommandLineParser parser;
+
+    QCommandLineOption inOption({QLatin1String("i"), QLatin1String("infile")}, QStringLiteral("Input qrc file"), QStringLiteral("infile"));
+    QCommandLineOption outOption({QLatin1String("o"), QLatin1String("outfile")}, QStringLiteral("Output qrc file"), QStringLiteral("outfile"));
+    QCommandLineOption includeOption({QLatin1String("I"), QLatin1String("include")},
+                                     QStringLiteral("InputFilter list (newline delimited, no extensions)"),
+                                     QStringLiteral("include"));
+    parser.setApplicationDescription(
+        QLatin1String("Utility to help just include some icons and not a full icon set."
+                      "This is a singleapplication distribution helper for power users; proceed at own risk"));
+    parser.addHelpOption();
+    parser.addVersionOption();
+    parser.addOption(inOption);
+    parser.addOption(outOption);
+    parser.addOption(includeOption);
+    parser.process(app);
+
+    const QString inName = parser.value(inOption);
+    const QString outName = parser.value(outOption);
+    if (!parser.isSet(includeOption)) {
+        auto ret = QFile::copy(inName, outName);
+        if (ret) {
+            return 0;
+        } else {
+            return 1;
+        }
+    }
+
+    const QStringList includeFilters = parseIncludeList(parser.value(includeOption));
+    if (includeFilters.empty()) {
+        return 1;
+    }
+
+    return parseFile(inName, outName, includeFilters);
+}
--
2.43.2
