#! /bin/sh
patch -p2 -l -f $* < $0
exit $?

From eb0adaf1064e6344540abfb576ae4e52c1172bfa Mon Sep 17 00:00:00 2001
From: Andre Heinecke <aheinecke@intevation.de>
Date: Tue, 16 Feb 2016 18:19:07 +0100
Subject: [PATCH 5/5] Hack generated conf files for Crosscompiling

This patch can be removed once Gpg4win is built on a platform
that has a packaged kconfig_compiler5.
---
 kleopatra/CMakeLists.txt                 | 22 ++++++---
 kleopatra/conf/CMakeLists.txt            | 20 ++++----
 kleopatra/emailoperationspreferences.cpp | 27 ++++++++++
 kleopatra/emailoperationspreferences.h   | 84 ++++++++++++++++++++++++++++++++
 kleopatra/fileoperationspreferences.cpp  | 21 ++++++++
 kleopatra/fileoperationspreferences.h    | 48 ++++++++++++++++++
 kleopatra/smimevalidationpreferences.cpp | 22 +++++++++
 kleopatra/smimevalidationpreferences.h   | 55 +++++++++++++++++++++
 kleopatra/tooltippreferences.cpp         | 27 ++++++++++
 kleopatra/tooltippreferences.h           | 84 ++++++++++++++++++++++++++++++++
 10 files changed, 394 insertions(+), 16 deletions(-)
 create mode 100644 kleopatra/emailoperationspreferences.cpp
 create mode 100644 kleopatra/emailoperationspreferences.h
 create mode 100644 kleopatra/fileoperationspreferences.cpp
 create mode 100644 kleopatra/fileoperationspreferences.h
 create mode 100644 kleopatra/smimevalidationpreferences.cpp
 create mode 100644 kleopatra/smimevalidationpreferences.h
 create mode 100644 kleopatra/tooltippreferences.cpp
 create mode 100644 kleopatra/tooltippreferences.h

diff --git a/kleopatra/CMakeLists.txt b/kleopatra/CMakeLists.txt
index 0c8b20b..056e20a 100644
--- a/kleopatra/CMakeLists.txt
+++ b/kleopatra/CMakeLists.txt
@@ -408,13 +408,21 @@ ki18n_wrap_ui(_kleopatra_SRCS
   newcertificatewizard/advancedsettingsdialog.ui
 )

-kconfig_add_kcfg_files(_kleopatra_SRCS
-  kcfg/tooltippreferences.kcfgc
-  kcfg/emailoperationspreferences.kcfgc
-  kcfg/fileoperationspreferences.kcfgc
-  kcfg/smimevalidationpreferences.kcfgc
-)
-
+if (NOT CMAKE_CROSSCOMPILING)
+  kconfig_add_kcfg_files(_kleopatra_SRCS
+    kcfg/tooltippreferences.kcfgc
+    kcfg/emailoperationspreferences.kcfgc
+    kcfg/fileoperationspreferences.kcfgc
+    kcfg/smimevalidationpreferences.kcfgc
+  )
+else()
+  set(_kleopatra_SRCS ${_kleopatra_SRCS}
+    tooltippreferences.cpp
+    emailoperationspreferences.cpp
+    fileoperationspreferences.cpp
+    smimevalidationpreferences.cpp
+  )
+endif()

 file(GLOB ICONS_SRCS "${CMAKE_CURRENT_SOURCE_DIR}/icons/*-apps-kleopatra.png")
 ecm_add_app_icon(_kleopatra_SRCS ICONS ${ICONS_SRCS})
diff --git a/kleopatra/conf/CMakeLists.txt b/kleopatra/conf/CMakeLists.txt
index 7a57933..c0d4e3d 100644
--- a/kleopatra/conf/CMakeLists.txt
+++ b/kleopatra/conf/CMakeLists.txt
@@ -14,10 +14,6 @@ if(BUILD_libkleopatraclient)
     cryptooperationsconfigwidget.ui
   )

-  kconfig_add_kcfg_files(_kcm_kleopatra_libkleopatraclient_extra_SRCS
-    ${kleopatra_SOURCE_DIR}/kcfg/smimevalidationpreferences.kcfgc
-  )
-
   set(_kcm_kleopatra_libkleopatraclient_extra_LIBS kleopatraclientgui)

   set(_kcm_kleopatra_libkleopatraclient_extra_install_FILES
@@ -34,7 +30,6 @@ else()
 endif()

 set(kcm_kleopatra_PART_SRCS
-  ${_kcm_kleopatra_kleo_only_SRCS}
   dirservconfigpage.cpp
   appearanceconfigpage.cpp
   appearanceconfigwidget.cpp
@@ -49,10 +44,17 @@ ki18n_wrap_ui(kcm_kleopatra_PART_SRCS
   smimevalidationconfigurationwidget.ui
 )

-kconfig_add_kcfg_files(kcm_kleopatra_PART_SRCS
-  ${kleopatra_SOURCE_DIR}/kcfg/tooltippreferences.kcfgc
-  ${kleopatra_SOURCE_DIR}/kcfg/emailoperationspreferences.kcfgc
-  ${kleopatra_SOURCE_DIR}/kcfg/fileoperationspreferences.kcfgc
+if(CMAKE_CROSSCOMPILING)
+  set(_kcfg_generated_files_dir ${kleopatra_SOURCE_DIR})
+else()
+  set(_kcfg_generated_files_dir ${kleopatra_BINARY_DIR})
+endif()
+
+set(kcm_kleopatra_PART_SRCS ${kcm_kleopatra_PART_SRCS}
+  ${_kcfg_generated_files_dir}/tooltippreferences.cpp
+  ${_kcfg_generated_files_dir}/emailoperationspreferences.cpp
+  ${_kcfg_generated_files_dir}/fileoperationspreferences.cpp
+  ${_kcfg_generated_files_dir}/smimevalidationpreferences.cpp
 )

 add_library(kcm_kleopatra MODULE ${kcm_kleopatra_PART_SRCS})
diff --git a/kleopatra/emailoperationspreferences.cpp b/kleopatra/emailoperationspreferences.cpp
new file mode 100644
index 0000000..730db97
--- /dev/null
+++ b/kleopatra/emailoperationspreferences.cpp
@@ -0,0 +1,27 @@
+// This file is generated by kconfig_compiler_kf5 from emailoperationspreferences.kcfg.
+// All changes you do to this file will be lost.
+
+#include "emailoperationspreferences.h"
+
+using namespace Kleo;
+
+EMailOperationsPreferences::EMailOperationsPreferences(  )
+  : KConfigSkeleton( QStringLiteral( "kleopatrarc" ) )
+{
+  setCurrentGroup( QStringLiteral( "EMailOperations" ) );
+
+  KConfigSkeleton::ItemBool  *itemQuickSignEMail;
+  itemQuickSignEMail = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "quick-sign-email" ), mQuickSignEMail, false );
+  addItem( itemQuickSignEMail, QStringLiteral( "QuickSignEMail" ) );
+  KConfigSkeleton::ItemBool  *itemQuickEncryptEMail;
+  itemQuickEncryptEMail = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "quick-encrypt-email" ), mQuickEncryptEMail, false );
+  addItem( itemQuickEncryptEMail, QStringLiteral( "QuickEncryptEMail" ) );
+  KConfigSkeleton::ItemRect  *itemDecryptVerifyPopupGeometry;
+  itemDecryptVerifyPopupGeometry = new KConfigSkeleton::ItemRect( currentGroup(), QStringLiteral( "decrypt-verify-popup-geometry" ), mDecryptVerifyPopupGeometry );
+  addItem( itemDecryptVerifyPopupGeometry, QStringLiteral( "DecryptVerifyPopupGeometry" ) );
+}
+
+EMailOperationsPreferences::~EMailOperationsPreferences()
+{
+}
+
diff --git a/kleopatra/emailoperationspreferences.h b/kleopatra/emailoperationspreferences.h
new file mode 100644
index 0000000..58881f8
--- /dev/null
+++ b/kleopatra/emailoperationspreferences.h
@@ -0,0 +1,84 @@
+// This file is generated by kconfig_compiler_kf5 from emailoperationspreferences.kcfg.
+// All changes you do to this file will be lost.
+#ifndef KLEO_EMAILOPERATIONSPREFERENCES_H
+#define KLEO_EMAILOPERATIONSPREFERENCES_H
+
+#include <qglobal.h>
+#include <kconfigskeleton.h>
+#include <QCoreApplication>
+#include <QDebug>
+
+namespace Kleo {
+
+class EMailOperationsPreferences : public KConfigSkeleton
+{
+  public:
+
+    EMailOperationsPreferences( );
+    ~EMailOperationsPreferences();
+
+    /**
+      Set Quick Sign EMail
+    */
+    void setQuickSignEMail( bool v )
+    {
+      if (!isImmutable( QStringLiteral( "QuickSignEMail" ) ))
+        mQuickSignEMail = v;
+    }
+
+    /**
+      Get Quick Sign EMail
+    */
+    bool quickSignEMail() const
+    {
+      return mQuickSignEMail;
+    }
+
+    /**
+      Set Quick Encrypt EMail
+    */
+    void setQuickEncryptEMail( bool v )
+    {
+      if (!isImmutable( QStringLiteral( "QuickEncryptEMail" ) ))
+        mQuickEncryptEMail = v;
+    }
+
+    /**
+      Get Quick Encrypt EMail
+    */
+    bool quickEncryptEMail() const
+    {
+      return mQuickEncryptEMail;
+    }
+
+    /**
+      Set Decrypt/Verify Popup Geometry
+    */
+    void setDecryptVerifyPopupGeometry( const QRect & v )
+    {
+      if (!isImmutable( QStringLiteral( "DecryptVerifyPopupGeometry" ) ))
+        mDecryptVerifyPopupGeometry = v;
+    }
+
+    /**
+      Get Decrypt/Verify Popup Geometry
+    */
+    QRect decryptVerifyPopupGeometry() const
+    {
+      return mDecryptVerifyPopupGeometry;
+    }
+
+  protected:
+
+    // EMailOperations
+    bool mQuickSignEMail;
+    bool mQuickEncryptEMail;
+    QRect mDecryptVerifyPopupGeometry;
+
+  private:
+};
+
+}
+
+#endif
+
diff --git a/kleopatra/fileoperationspreferences.cpp b/kleopatra/fileoperationspreferences.cpp
new file mode 100644
index 0000000..d2d20fc
--- /dev/null
+++ b/kleopatra/fileoperationspreferences.cpp
@@ -0,0 +1,21 @@
+// This file is generated by kconfig_compiler_kf5 from fileoperationspreferences.kcfg.
+// All changes you do to this file will be lost.
+
+#include "fileoperationspreferences.h"
+
+using namespace Kleo;
+
+FileOperationsPreferences::FileOperationsPreferences(  )
+  : KConfigSkeleton( QStringLiteral( "kleopatrarc" ) )
+{
+  setCurrentGroup( QStringLiteral( "FileOperations" ) );
+
+  KConfigSkeleton::ItemBool  *itemUsePGPFileExt;
+  itemUsePGPFileExt = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "file-extension-pgp" ), mUsePGPFileExt, false );
+  addItem( itemUsePGPFileExt, QStringLiteral( "UsePGPFileExt" ) );
+}
+
+FileOperationsPreferences::~FileOperationsPreferences()
+{
+}
+
diff --git a/kleopatra/fileoperationspreferences.h b/kleopatra/fileoperationspreferences.h
new file mode 100644
index 0000000..9866a70
--- /dev/null
+++ b/kleopatra/fileoperationspreferences.h
@@ -0,0 +1,48 @@
+// This file is generated by kconfig_compiler_kf5 from fileoperationspreferences.kcfg.
+// All changes you do to this file will be lost.
+#ifndef KLEO_FILEOPERATIONSPREFERENCES_H
+#define KLEO_FILEOPERATIONSPREFERENCES_H
+
+#include <qglobal.h>
+#include <kconfigskeleton.h>
+#include <QCoreApplication>
+#include <QDebug>
+
+namespace Kleo {
+
+class FileOperationsPreferences : public KConfigSkeleton
+{
+  public:
+
+    FileOperationsPreferences( );
+    ~FileOperationsPreferences();
+
+    /**
+      Set Use pgp as the default extension for generated OpenPGP files
+    */
+    void setUsePGPFileExt( bool v )
+    {
+      if (!isImmutable( QStringLiteral( "UsePGPFileExt" ) ))
+        mUsePGPFileExt = v;
+    }
+
+    /**
+      Get Use pgp as the default extension for generated OpenPGP files
+    */
+    bool usePGPFileExt() const
+    {
+      return mUsePGPFileExt;
+    }
+
+  protected:
+
+    // FileOperations
+    bool mUsePGPFileExt;
+
+  private:
+};
+
+}
+
+#endif
+
diff --git a/kleopatra/smimevalidationpreferences.cpp b/kleopatra/smimevalidationpreferences.cpp
new file mode 100644
index 0000000..3d9a16f
--- /dev/null
+++ b/kleopatra/smimevalidationpreferences.cpp
@@ -0,0 +1,22 @@
+// This file is generated by kconfig_compiler_kf5 from smimevalidationpreferences.kcfg.
+// All changes you do to this file will be lost.
+
+#include "smimevalidationpreferences.h"
+
+using namespace Kleo;
+
+SMimeValidationPreferences::SMimeValidationPreferences(  )
+  : KConfigSkeleton( QStringLiteral( "kleopatrarc" ) )
+{
+  setCurrentGroup( QStringLiteral( "SMime Validation" ) );
+
+  KConfigSkeleton::ItemUInt  *itemRefreshInterval;
+  itemRefreshInterval = new KConfigSkeleton::ItemUInt( currentGroup(), QStringLiteral( "refresh-interval" ), mRefreshInterval, 1 );
+  itemRefreshInterval->setMaxValue(24);
+  addItem( itemRefreshInterval, QStringLiteral( "RefreshInterval" ) );
+}
+
+SMimeValidationPreferences::~SMimeValidationPreferences()
+{
+}
+
diff --git a/kleopatra/smimevalidationpreferences.h b/kleopatra/smimevalidationpreferences.h
new file mode 100644
index 0000000..9617bd5
--- /dev/null
+++ b/kleopatra/smimevalidationpreferences.h
@@ -0,0 +1,55 @@
+// This file is generated by kconfig_compiler_kf5 from smimevalidationpreferences.kcfg.
+// All changes you do to this file will be lost.
+#ifndef KLEO_SMIMEVALIDATIONPREFERENCES_H
+#define KLEO_SMIMEVALIDATIONPREFERENCES_H
+
+#include <qglobal.h>
+#include <kconfigskeleton.h>
+#include <QCoreApplication>
+#include <QDebug>
+
+namespace Kleo {
+
+class SMimeValidationPreferences : public KConfigSkeleton
+{
+  public:
+
+    SMimeValidationPreferences( );
+    ~SMimeValidationPreferences();
+
+    /**
+      Set Certificate refresh interval (in hours). Zero (0) disables.
+    */
+    void setRefreshInterval( uint v )
+    {
+
+      if (v > 24)
+      {
+        qDebug() << "setRefreshInterval: value " << v << " is greater than the maximum value of 24";
+        v = 24;
+      }
+
+      if (!isImmutable( QStringLiteral( "RefreshInterval" ) ))
+        mRefreshInterval = v;
+    }
+
+    /**
+      Get Certificate refresh interval (in hours). Zero (0) disables.
+    */
+    uint refreshInterval() const
+    {
+      return mRefreshInterval;
+    }
+
+  protected:
+
+    // SMime Validation
+    uint mRefreshInterval;
+
+  private:
+};
+
+}
+
+#endif
+
diff --git a/kleopatra/tooltippreferences.cpp b/kleopatra/tooltippreferences.cpp
new file mode 100644
index 0000000..7e85c6a
--- /dev/null
+++ b/kleopatra/tooltippreferences.cpp
@@ -0,0 +1,27 @@
+// This file is generated by kconfig_compiler_kf5 from tooltippreferences.kcfg.
+// All changes you do to this file will be lost.
+
+#include "tooltippreferences.h"
+
+using namespace Kleo;
+
+TooltipPreferences::TooltipPreferences(  )
+  : KConfigSkeleton( QStringLiteral( "kleopatrarc" ) )
+{
+  setCurrentGroup( QStringLiteral( "Tooltip" ) );
+
+  KConfigSkeleton::ItemBool  *itemShowValidity;
+  itemShowValidity = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "show-validity" ), mShowValidity, true );
+  addItem( itemShowValidity, QStringLiteral( "ShowValidity" ) );
+  KConfigSkeleton::ItemBool  *itemShowOwnerInformation;
+  itemShowOwnerInformation = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "show-owner-information" ), mShowOwnerInformation, false );
+  addItem( itemShowOwnerInformation, QStringLiteral( "ShowOwnerInformation" ) );
+  KConfigSkeleton::ItemBool  *itemShowCertificateDetails;
+  itemShowCertificateDetails = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "show-certificate-details" ), mShowCertificateDetails, false );
+  addItem( itemShowCertificateDetails, QStringLiteral( "ShowCertificateDetails" ) );
+}
+
+TooltipPreferences::~TooltipPreferences()
+{
+}
+
diff --git a/kleopatra/tooltippreferences.h b/kleopatra/tooltippreferences.h
new file mode 100644
index 0000000..44f77a2
--- /dev/null
+++ b/kleopatra/tooltippreferences.h
@@ -0,0 +1,84 @@
+// This file is generated by kconfig_compiler_kf5 from tooltippreferences.kcfg.
+// All changes you do to this file will be lost.
+#ifndef KLEO_TOOLTIPPREFERENCES_H
+#define KLEO_TOOLTIPPREFERENCES_H
+
+#include <qglobal.h>
+#include <kconfigskeleton.h>
+#include <QCoreApplication>
+#include <QDebug>
+
+namespace Kleo {
+
+class TooltipPreferences : public KConfigSkeleton
+{
+  public:
+
+    TooltipPreferences( );
+    ~TooltipPreferences();
+
+    /**
+      Set Show certificate validity
+    */
+    void setShowValidity( bool v )
+    {
+      if (!isImmutable( QStringLiteral( "ShowValidity" ) ))
+        mShowValidity = v;
+    }
+
+    /**
+      Get Show certificate validity
+    */
+    bool showValidity() const
+    {
+      return mShowValidity;
+    }
+
+    /**
+      Set Show certificate owner information
+    */
+    void setShowOwnerInformation( bool v )
+    {
+      if (!isImmutable( QStringLiteral( "ShowOwnerInformation" ) ))
+        mShowOwnerInformation = v;
+    }
+
+    /**
+      Get Show certificate owner information
+    */
+    bool showOwnerInformation() const
+    {
+      return mShowOwnerInformation;
+    }
+
+    /**
+      Set Show certificate details
+    */
+    void setShowCertificateDetails( bool v )
+    {
+      if (!isImmutable( QStringLiteral( "ShowCertificateDetails" ) ))
+        mShowCertificateDetails = v;
+    }
+
+    /**
+      Get Show certificate details
+    */
+    bool showCertificateDetails() const
+    {
+      return mShowCertificateDetails;
+    }
+
+  protected:
+
+    // Tooltip
+    bool mShowValidity;
+    bool mShowOwnerInformation;
+    bool mShowCertificateDetails;
+
+  private:
+};
+
+}
+
+#endif
+
--
2.1.4
