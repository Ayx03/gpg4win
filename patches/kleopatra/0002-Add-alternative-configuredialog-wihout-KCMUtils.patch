#! /bin/sh
patch -p2 -l -f $* < $0
exit $?

From cbf48c48727025c585b3647c89ae668ba0d14d0d Mon Sep 17 00:00:00 2001
From: Andre Heinecke <aheinecke@intevation.de>
Date: Tue, 16 Feb 2016 17:48:44 +0100
Subject: [PATCH 2/5] Add alternative configuredialog wihout KCMUtils

KCMUtils heavily depends on QDbus and KService for
a standalone deployment, like on Windows, we don't
want those dependencies.
---
 kleopatra/CMakeLists.txt                |  22 ++-
 kleopatra/conf/CMakeLists.txt           |  12 +-
 kleopatra/conf/configuredialog.cpp      |  59 +++----
 kleopatra/conf/configuredialog.h        |  23 ++-
 kleopatra/conf/dirservconfigpage.h      |   2 +-
 kleopatra/conf/kleopageconfigdialog.cpp | 304 ++++++++++++++++++++++++++++++++
 kleopatra/conf/kleopageconfigdialog.h   |  73 ++++++++
 kleopatra/config-kleopatra.h.cmake      |   4 +-
 8 files changed, 449 insertions(+), 50 deletions(-)
 create mode 100644 kleopatra/conf/kleopageconfigdialog.cpp
 create mode 100644 kleopatra/conf/kleopageconfigdialog.h

diff --git a/kleopatra/CMakeLists.txt b/kleopatra/CMakeLists.txt
index 9d049f1..2cb7b63 100644
--- a/kleopatra/CMakeLists.txt
+++ b/kleopatra/CMakeLists.txt
@@ -10,6 +10,9 @@ if(${CMAKE_SOURCE_DIR} STREQUAL ${kleopatra_SOURCE_DIR})
   set(LIBKLEO_VERSION "5.1.41")
   set(QT_REQUIRED_VERSION "5.4.0")

+  option(FORCE_DISABLE_KCMUTILS "Force building Kleopatra without KCMUtils. Doing this will disable configuration KCM Plugins. [default=OFF]" OFF)
+
+
   find_package(ECM ${KF5_VERSION} REQUIRED NO_MODULE)
   set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH})

@@ -33,7 +36,6 @@ if(${CMAKE_SOURCE_DIR} STREQUAL ${kleopatra_SOURCE_DIR})

 # Find KF5 packages
   find_package(KF5Codecs ${KF5_VERSION} CONFIG REQUIRED)
-  find_package(KF5KCMUtils ${KF5_VERSION} CONFIG REQUIRED)
   find_package(KF5Config ${KF5_VERSION} CONFIG REQUIRED)
   find_package(KF5I18n ${KF5_VERSION} CONFIG REQUIRED)
   find_package(KF5IconThemes ${KF5_VERSION} CONFIG REQUIRED)
@@ -41,6 +43,13 @@ if(${CMAKE_SOURCE_DIR} STREQUAL ${kleopatra_SOURCE_DIR})
   find_package(KF5XmlGui ${KF5_VERSION} CONFIG REQUIRED)
   find_package(KF5WindowSystem ${KF5_VERSION} CONFIG REQUIRED)
   find_package(KF5TextWidgets ${KF5_VERSION} CONFIG REQUIRED)
+  find_package(KF5WidgetsAddons ${KF5_VERSION} CONFIG REQUIRED)
+  find_package(KF5ConfigWidgets ${KF5_VERSION} CONFIG REQUIRED)
+  find_package(KF5CoreAddons ${KF5_VERSION} CONFIG REQUIRED)
+
+if (NOT FORCE_DISABLE_KCMUTILS)
+  find_package(KF5KCMUtils ${KF5_VERSION} CONFIG REQUIRED)
+endif()

 # Optional packages
 if (WIN32)
@@ -63,6 +72,8 @@ endif()
   find_package(Qt5 ${QT_REQUIRED_VERSION} CONFIG REQUIRED Widgets Test Network)
 endif() # Standalone build

+set(HAVE_KCMUTILS ${KF5KCMUtils_FOUND})
+
 find_package(Boost 1.34.0 REQUIRED)

 find_path(Boost_TOPOLOGICAL_SORT_DIR NAMES boost/graph/topological_sort.hpp PATHS ${Boost_INCLUDE_DIRS})
@@ -357,6 +368,13 @@ else()
   set(_kleopatra_SRCS ${_kleopatra_SRCS} utils/kuniqueservice_win.cpp)
 endif()

+if (KF5KCMUtils_FOUND)
+  set(_kleopatra_SRCS ${_kleopatra_SRCS} conf/kcmconfiguredialog.cpp)
+  set(_kleopatra_extra_libs ${_kleopatra_extra_libs} KF5::KCMUtils)
+else()
+  set(_kleopatra_SRCS ${_kleopatra_SRCS} conf/kleopageconfigdialog.cpp)
+endif()
+
 ecm_qt_declare_logging_category(_kleopatra_SRCS HEADER kleopatra_debug.h IDENTIFIER KLEOPATRA_LOG CATEGORY_NAME log_kleopatra)

 if(KLEO_MODEL_TEST)
@@ -408,11 +426,11 @@ target_link_libraries(kleopatra_bin
   ${_kleopatra_extra_libs}
   KF5::Libkleo
   KF5::Mime
-  KF5::KCMUtils
   KF5::I18n
   KF5::XmlGui
   KF5::IconThemes
   KF5::WindowSystem
+  KF5::CoreAddons
   ${_kleopatra_dbusaddons_libs}
   Qt5::Network
   ${_kleopatra_uiserver_extra_libs}
diff --git a/kleopatra/conf/CMakeLists.txt b/kleopatra/conf/CMakeLists.txt
index b74fbc4..7a57933 100644
--- a/kleopatra/conf/CMakeLists.txt
+++ b/kleopatra/conf/CMakeLists.txt
@@ -55,18 +55,18 @@ kconfig_add_kcfg_files(kcm_kleopatra_PART_SRCS
   ${kleopatra_SOURCE_DIR}/kcfg/fileoperationspreferences.kcfgc
 )

-if(KLEO_STATIC_KCMODULES)
-  add_library(kcm_kleopatra MODULE STATIC ${kcm_kleopatra_PART_SRCS})
-else()
-  add_library(kcm_kleopatra MODULE ${kcm_kleopatra_PART_SRCS})
+add_library(kcm_kleopatra MODULE ${kcm_kleopatra_PART_SRCS})
+
+if(HAVE_KCMUTILS)
+  set (_kcm_kleopatra_extra_libs KF5::KCMUtils)
 endif()

 target_link_libraries(kcm_kleopatra
   KF5::Libkleo
-  KF5::KCMUtils
   KF5::IconThemes
   KF5::I18n
-  Qt5::DBus
+  KF5::WidgetsAddons
+  KF5::ConfigWidgets
   ${_kcm_kleopatra_extra_libs}
   ${_kcm_kleopatra_libkleopatraclient_extra_LIBS}
 )
diff --git a/kleopatra/conf/configuredialog.cpp b/kleopatra/conf/configuredialog.cpp
index 3cb3104..b9ef7e4 100644
--- a/kleopatra/conf/configuredialog.cpp
+++ b/kleopatra/conf/configuredialog.cpp
@@ -31,53 +31,43 @@
     your version.
 */

-#include <config-kleopatra.h>
+#include "config-kleopatra.h"

 #include "configuredialog.h"
-#include <kwindowsystem.h>
-#include <kconfig.h>
-#include <kiconloader.h>
-#include <kcmultidialog.h>
+
+#include <KWindowSystem>
+#include <KConfig>
+#include <KIconLoader>
 #include <KLocalizedString>
-#include <kconfiggroup.h>
-#include <QApplication>
+#include <KConfigGroup>
 #include <KSharedConfig>
-#include <QIcon>

-#ifdef KLEO_STATIC_KCMODULES
-# include <KDesktopFile>
-# define KCM_IMPORT_PLUGIN( x ) extern "C" KCModule * create_##x( QWidget * parent = Q_NULLPTR, const QVariantList & args=QVariantList() );
-# define addMyModule( x ) addModule( KCModuleInfo( KDesktopFile( "services", QLatin1String(#x) + QLatin1String(".desktop") ) ), create_##x() )
-#else // KLEO_STATIC_KCMODULES
-# define KCM_IMPORT_PLUGIN( x )
-# define addMyModule( x ) addModule( QLatin1String(#x) )
-#endif // KLEO_STATIC_KCMODULES
+#include <QApplication>
+#include <QIcon>

-KCM_IMPORT_PLUGIN(kleopatra_config_dirserv)
-KCM_IMPORT_PLUGIN(kleopatra_config_appear)
-#ifdef HAVE_KLEOPATRACLIENT_LIBRARY
-KCM_IMPORT_PLUGIN(kleopatra_config_cryptooperations)
-KCM_IMPORT_PLUGIN(kleopatra_config_smimevalidation)
+#if HAVE_KCMUTILS
+# include "kcmconfiguredialog.h"
+#else
+# include "kleopageconfigdialog.h"
 #endif
-KCM_IMPORT_PLUGIN(kleopatra_config_gnupgsystem)

 ConfigureDialog::ConfigureDialog(QWidget *parent)
+#if HAVE_KCMUTILS
     : KCMultiDialog(parent)
+#else
+    : KleoPageConfigDialog(parent)
+#endif
 {
     setFaceType(KPageDialog::List);
     setWindowTitle(i18n("Configure"));
     KWindowSystem::setIcons(winId(), qApp->windowIcon().pixmap(IconSize(KIconLoader::Desktop), IconSize(KIconLoader::Desktop)),
                             qApp->windowIcon().pixmap(IconSize(KIconLoader::Small), IconSize(KIconLoader::Small)));
-    //QT5 showButton( User1, true );
-
-    addMyModule(kleopatra_config_dirserv);
-    addMyModule(kleopatra_config_appear);
-#ifdef HAVE_KLEOPATRACLIENT_LIBRARY
-    addMyModule(kleopatra_config_cryptooperations);
-    addMyModule(kleopatra_config_smimevalidation);
-#endif
-    addMyModule(kleopatra_config_gnupgsystem);

+    addModule(QStringLiteral("kleopatra_config_dirserv"));
+    addModule(QStringLiteral("kleopatra_config_appear"));
+    addModule(QStringLiteral("kleopatra_config_cryptooperations"));
+    addModule(QStringLiteral("kleopatra_config_smimevalidation"));
+    addModule(QStringLiteral("kleopatra_config_gnupgsystem"));
     // We store the minimum size of the dialog on hide, because otherwise
     // the KCMultiDialog starts with the size of the first kcm, not
     // the largest one. This way at least after the first showing of
@@ -96,13 +86,14 @@ void ConfigureDialog::hideEvent(QHideEvent *e)
     KConfigGroup geometry(KSharedConfig::openConfig(), "Geometry");
     geometry.writeEntry("ConfigureDialogWidth", minSize.width());
     geometry.writeEntry("ConfigureDialogHeight", minSize.height());
+#if HAVE_KCMUTILS
     KCMultiDialog::hideEvent(e);
+#else
+    KleoPageConfigDialog::hideEvent(e);
+#endif
 }

 ConfigureDialog::~ConfigureDialog()
 {
 }

-#undef addMyModule
-#undef KCM_IMPORT_PLUGIN
-
diff --git a/kleopatra/conf/configuredialog.h b/kleopatra/conf/configuredialog.h
index 8096bbe..16fa2c0 100644
--- a/kleopatra/conf/configuredialog.h
+++ b/kleopatra/conf/configuredialog.h
@@ -1,16 +1,17 @@
 /*
-    configuredialog.cpp
+    configuredialog.h

-    This file is part of kleopatra
+    This file is part of Kleopatra
     Copyright (C) 2000 Espen Sand, espen@kde.org
     Copyright (C) 2001-2002 Marc Mutz <mutz@kde.org>
     Copyright (c) 2004 Klar√§lvdalens Datakonsult AB
+    Copyright (c) 2016 Intevation GmbH

-    Libkleopatra is free software; you can redistribute it and/or
+    Kleopatra is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License,
     version 2, as published by the Free Software Foundation.

-    Libkleopatra is distributed in the hope that it will be useful,
+    Kleopatra is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.
@@ -34,9 +35,21 @@
 #ifndef __KLEOPATRA_CONF_CONFIGUREDIALOG_H__
 #define __KLEOPATRA_CONF_CONFIGUREDIALOG_H__

-#include <kcmultidialog.h>
+#include "config-kleopatra.h"

+/**
+ * This is a small wrapper class that holds common code between
+ * the KCM Config dialog (which is used when KCMUtils are available)
+ * and the KleoPageConfigDialog. Which is just a KPageView
+ * with the neccessary bits of the KCMultiDialog behavior.
+ */
+#if HAVE_KCMUTILS
+# include <KCMultiDialog>
 class ConfigureDialog : public KCMultiDialog
+#else
+# include "kleopageconfigdialog.h"
+class ConfigureDialog : public KleoPageConfigDialog
+#endif
 {
     Q_OBJECT
 public:
diff --git a/kleopatra/conf/dirservconfigpage.h b/kleopatra/conf/dirservconfigpage.h
index 28bf6c4..5660208 100644
--- a/kleopatra/conf/dirservconfigpage.h
+++ b/kleopatra/conf/dirservconfigpage.h
@@ -33,7 +33,7 @@
 #ifndef DIRSERVCONFIGPAGE_H
 #define DIRSERVCONFIGPAGE_H

-#include <kcmodule.h>
+#include <KCModule>

 #include "Libkleo/CryptoConfig"

diff --git a/kleopatra/conf/kleopageconfigdialog.cpp b/kleopatra/conf/kleopageconfigdialog.cpp
new file mode 100644
index 0000000..ccc70ce
--- /dev/null
+++ b/kleopatra/conf/kleopageconfigdialog.cpp
@@ -0,0 +1,304 @@
+/*
+    kleopageconfigdialog.cpp
+
+    This file is part of Kleopatra
+    Copyright (c) 2016 Intevation GmbH
+
+    Kleopatra is free software; you can redistribute it and/or
+    modify it under the terms of the GNU General Public License,
+    version 2, as published by the Free Software Foundation.
+
+    Kleopatra is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+
+    In addition, as a special exception, the copyright holders give
+    permission to link the code of this program with any edition of
+    the Qt library by Trolltech AS, Norway (or with modified versions
+    of Qt that use the same license as Qt), and distribute linked
+    combinations including the two.  You must obey the GNU General
+    Public License in all respects for all of the code used other than
+    Qt.  If you modify this file, you may extend this exception to
+    your version of the file, but you are not obligated to do so.  If
+    you do not wish to do so, delete this exception statement from
+    your version.
+
+    It is derived from KCMultidialog which is:
+
+    Copyright (c) 2000 Matthias Elter <elter@kde.org>
+    Copyright (c) 2003 Daniel Molkentin <molkentin@kde.org>
+    Copyright (c) 2003,2006 Matthias Kretz <kretz@kde.org>
+    Copyright (c) 2004 Frans Englich <frans.englich@telia.com>
+    Copyright (c) 2006 Tobias Koenig <tokoe@kde.org>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+
+#include "kleopageconfigdialog.h"
+
+#include <QDialogButtonBox>
+#include <QPushButton>
+#include <QLibrary>
+#include <QCoreApplication>
+#include <QUrl>
+#include <QDesktopServices>
+#include <QProcess>
+
+#include <KCModule>
+#include <KDesktopFile>
+#include <KPluginLoader>
+#include <KStandardGuiItem>
+#include <KMessageBox>
+#include <KLocalizedString>
+
+#include "kleopatra_debug.h"
+
+#define KCM_LIBRARY_NAME "kcm_kleopatra"
+
+KleoPageConfigDialog::KleoPageConfigDialog(QWidget *parent)
+    : KPageDialog(parent)
+{
+    setModal(false);
+
+    QDialogButtonBox *buttonBox = new QDialogButtonBox(this);
+    buttonBox->setStandardButtons(QDialogButtonBox::Help
+                                  | QDialogButtonBox::RestoreDefaults
+                                  | QDialogButtonBox::Cancel
+                                  | QDialogButtonBox::Apply
+                                  | QDialogButtonBox::Ok
+                                  | QDialogButtonBox::Reset);
+    KGuiItem::assign(buttonBox->button(QDialogButtonBox::Ok), KStandardGuiItem::ok());
+    KGuiItem::assign(buttonBox->button(QDialogButtonBox::Cancel), KStandardGuiItem::cancel());
+    KGuiItem::assign(buttonBox->button(QDialogButtonBox::RestoreDefaults),
+                                       KStandardGuiItem::defaults());
+    KGuiItem::assign(buttonBox->button(QDialogButtonBox::Apply), KStandardGuiItem::apply());
+    KGuiItem::assign(buttonBox->button(QDialogButtonBox::Reset), KStandardGuiItem::reset());
+    KGuiItem::assign(buttonBox->button(QDialogButtonBox::Help), KStandardGuiItem::help());
+    buttonBox->button(QDialogButtonBox::Reset)->setEnabled(false);
+    buttonBox->button(QDialogButtonBox::Apply)->setEnabled(false);
+
+    connect(buttonBox->button(QDialogButtonBox::Apply), &QAbstractButton::clicked,
+            this, &KleoPageConfigDialog::slotApplyClicked);
+    connect(buttonBox->button(QDialogButtonBox::Ok), &QAbstractButton::clicked,
+            this, &KleoPageConfigDialog::slotOkClicked);
+    connect(buttonBox->button(QDialogButtonBox::RestoreDefaults), &QAbstractButton::clicked,
+            this, &KleoPageConfigDialog::slotDefaultClicked);
+    connect(buttonBox->button(QDialogButtonBox::Help), &QAbstractButton::clicked,
+            this, &KleoPageConfigDialog::slotHelpClicked);
+    connect(buttonBox->button(QDialogButtonBox::Reset), &QAbstractButton::clicked,
+            this, &KleoPageConfigDialog::slotUser1Clicked);
+
+    setButtonBox(buttonBox);
+
+    connect(this, &KPageDialog::currentPageChanged,
+            this, &KleoPageConfigDialog::slotCurrentPageChanged);
+}
+
+void KleoPageConfigDialog::slotCurrentPageChanged(KPageWidgetItem *current, KPageWidgetItem *previous)
+{
+    if (!previous) {
+        return;
+    }
+    blockSignals(true);
+    setCurrentPage(previous);
+
+    KCModule *previousModule = qobject_cast<KCModule*>(previous->widget());
+    bool canceled = false;
+    if (previousModule && mChangedModules.contains(previousModule)) {
+        const int queryUser = KMessageBox::warningYesNoCancel(
+                          this,
+                          i18n("The settings of the current module have changed.\n"
+                               "Do you want to apply the changes or discard them?"),
+                          i18n("Apply Settings"),
+                          KStandardGuiItem::apply(),
+                          KStandardGuiItem::discard(),
+                          KStandardGuiItem::cancel());
+        if (queryUser == KMessageBox::Yes) {
+            previousModule->save();
+        } else if (queryUser == KMessageBox::No) {
+            previousModule->load();
+        }
+        canceled = queryUser == KMessageBox::Cancel;
+    }
+    if (!canceled) {
+        mChangedModules.removeAll(previousModule);
+        setCurrentPage(current);
+    }
+    blockSignals(false);
+
+    clientChanged();
+}
+
+void KleoPageConfigDialog::apply()
+{
+    QPushButton *applyButton = buttonBox()->button(QDialogButtonBox::Apply);
+    applyButton->setFocus();
+    foreach (KCModule *module, mChangedModules) {
+        module->save();
+    }
+    mChangedModules.clear();
+    Q_EMIT configCommitted();
+    clientChanged();
+}
+
+void KleoPageConfigDialog::slotDefaultClicked()
+{
+    const KPageWidgetItem *item = currentPage();
+    if (!item) {
+        return;
+    }
+
+    KCModule *module = qobject_cast<KCModule*>(item->widget());
+    if (!module) {
+        return;
+    }
+    module->defaults();
+    clientChanged();
+}
+
+void KleoPageConfigDialog::slotUser1Clicked()
+{
+    const KPageWidgetItem *item = currentPage();
+    if (!item) {
+        return;
+    }
+
+    KCModule *module = qobject_cast<KCModule*>(item->widget());
+    if (!module) {
+        return;
+    }
+    module->load();
+    mChangedModules.removeAll(module);
+    clientChanged();
+}
+
+void KleoPageConfigDialog::slotApplyClicked()
+{
+    apply();
+}
+
+void KleoPageConfigDialog::slotOkClicked()
+{
+    apply();
+    accept();
+}
+
+void KleoPageConfigDialog::slotHelpClicked()
+{
+    const KPageWidgetItem *item = currentPage();
+    if (!item) {
+        return;
+    }
+
+    const QString docPath = mHelpUrls.value(item->name());
+
+    QUrl docUrl = QUrl(QStringLiteral("help:/")).resolved(QUrl(docPath)); // same code as in KHelpClient::invokeHelp
+    if (docUrl.scheme() == QLatin1String("help") || docUrl.scheme() == QLatin1String("man") || docUrl.scheme() == QLatin1String("info")) {
+        QProcess::startDetached(QStringLiteral("khelpcenter"), QStringList() << docUrl.toString());
+    } else {
+        QDesktopServices::openUrl(docUrl);
+    }
+}
+
+static KCModule *loadModule(const QString &name)
+{
+    QLibrary lib(KPluginLoader::findPlugin(KCM_LIBRARY_NAME));
+    if (lib.load()) {
+        KCModule *(*create)(QWidget *, const char *);
+        QByteArray factorymethod("create_");
+        factorymethod += name.toLatin1();
+        create = reinterpret_cast<KCModule *(*)(QWidget *, const char *)>(lib.resolve(factorymethod.constData()));
+        if (create) {
+            return create(Q_NULLPTR, name.toLatin1().constData());
+        } else {
+            qCWarning(KLEOPATRA_LOG) << "Failed to load config module: " << name;
+            return Q_NULLPTR;
+        }
+    }
+    qCWarning(KLEOPATRA_LOG) << "Failed to load library: " << KCM_LIBRARY_NAME;
+    return Q_NULLPTR;
+}
+
+void KleoPageConfigDialog::addModule(const QString &name)
+{
+    // We use a path relative to our installation location
+    const QString path = qApp->applicationDirPath() +
+                         QLatin1String("/../share/kservices5/") +
+                         name + QLatin1String(".desktop");
+    KDesktopFile desktopModule(path);
+
+    KCModule *mod = loadModule(name);
+    mModules << mod;
+
+    const QString dName = desktopModule.readName();
+
+    KPageWidgetItem *item = addPage(mod, dName);
+    item->setIcon(QIcon::fromTheme(desktopModule.readIcon()));
+    item->setHeader(desktopModule.readComment());
+
+    connect(mod, SIGNAL(changed(bool)), this, SLOT(moduleChanged(bool)));
+
+    mHelpUrls.insert(dName, desktopModule.readDocPath());
+}
+
+void KleoPageConfigDialog::moduleChanged(bool state)
+{
+    KCModule *module = qobject_cast<KCModule*>(sender());
+    qCDebug(KLEOPATRA_LOG) << "Module changed: " << state << " mod " << module;
+    if (mChangedModules.contains(module)) {
+        if (!state) {
+            mChangedModules.removeAll(module);
+        }
+        return;
+    }
+    if (state) {
+        mChangedModules << module;
+    }
+    clientChanged();
+}
+
+void KleoPageConfigDialog::clientChanged()
+{
+    const KPageWidgetItem *item = currentPage();
+    if (!item) {
+        return;
+    }
+    KCModule *module = qobject_cast<KCModule*>(item->widget());
+
+    if (!module) {
+        return;
+    }
+    qCDebug(KLEOPATRA_LOG) << "Client changed: " << " mod " << module;
+
+    bool change = false;
+    change = mChangedModules.contains(module);
+
+    QPushButton *resetButton = buttonBox()->button(QDialogButtonBox::Reset);
+    if (resetButton) {
+        resetButton->setEnabled(change);
+    }
+
+    QPushButton *applyButton = buttonBox()->button(QDialogButtonBox::Apply);
+    if (applyButton) {
+        applyButton->setEnabled(change);
+    }
+}
diff --git a/kleopatra/conf/kleopageconfigdialog.h b/kleopatra/conf/kleopageconfigdialog.h
new file mode 100644
index 0000000..809c930
--- /dev/null
+++ b/kleopatra/conf/kleopageconfigdialog.h
@@ -0,0 +1,73 @@
+/*
+    kleopageconfigdialog.h.h
+
+    This file is part of Kleopatra
+    Copyright (c) 2016 Intevation GmbH
+
+    Kleopatra is free software; you can redistribute it and/or
+    modify it under the terms of the GNU General Public License,
+    version 2, as published by the Free Software Foundation.
+
+    Kleopatra is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+
+    In addition, as a special exception, the copyright holders give
+    permission to link the code of this program with any edition of
+    the Qt library by Trolltech AS, Norway (or with modified versions
+    of Qt that use the same license as Qt), and distribute linked
+    combinations including the two.  You must obey the GNU General
+    Public License in all respects for all of the code used other than
+    Qt.  If you modify this file, you may extend this exception to
+    your version of the file, but you are not obligated to do so.  If
+    you do not wish to do so, delete this exception statement from
+    your version.
+*/
+
+#ifndef __KLEOPATRA_CONF_KLEOPAGECONFIGDIALOG_H__
+#define __KLEOPATRA_CONF_KLEOPAGECONFIGDIALOG_H__
+
+#include <KPageDialog>
+#include <QList>
+
+class KCModule;
+class KPageWidgetItem;
+
+/**
+ * KPageDialog based config dialog to be used when
+ * KCMUtils are not available. */
+class KleoPageConfigDialog : public KPageDialog
+{
+    Q_OBJECT
+public:
+    explicit KleoPageConfigDialog(QWidget *parent = Q_NULLPTR);
+
+    void addModule(const QString &module);
+
+Q_SIGNALS:
+    void configCommitted();
+
+protected Q_SLOTS:
+    void slotDefaultClicked();
+    void slotUser1Clicked();
+    void slotApplyClicked();
+    void slotOkClicked();
+    void slotHelpClicked();
+    void slotCurrentPageChanged(KPageWidgetItem *current, KPageWidgetItem *previous);
+    void moduleChanged(bool value);
+
+private:
+    void clientChanged();
+    void apply();
+
+    QList<KCModule *> mModules;
+    QList<KCModule *> mChangedModules;
+    QMap<QString, QString> mHelpUrls;
+};
+
+#endif /* __KLEOPATRA_CONF_KLEOPAGECONFIGDIALOG_H__ */
diff --git a/kleopatra/config-kleopatra.h.cmake b/kleopatra/config-kleopatra.h.cmake
index 4fb4a8f..d0c7092 100644
--- a/kleopatra/config-kleopatra.h.cmake
+++ b/kleopatra/config-kleopatra.h.cmake
@@ -21,5 +21,5 @@
 /* Define to 1 if you build libkleopatraclient */
 #cmakedefine HAVE_KLEOPATRACLIENT_LIBRARY 1

-/* Mirrored from cmake option */
-#cmakedefine KLEO_STATIC_KCMODULES 1
+/* KF5KCMUtils available */
+#cmakedefine01 HAVE_KCMUTILS
--
2.1.4
