#! /bin/sh
patch -p1 -l -f $* < $0
exit $?

From 4f1fd6feec86fe4045e41af55abbf508620bdb41 Mon Sep 17 00:00:00 2001
From: Andre Heinecke <aheinecke@gnupg.org>
Date: Fri, 10 Nov 2023 12:54:32 +0100
Subject: [PATCH] DRAFT: Rework aboutdata to use a settings file

This uses unreleased code from kcoreaddons which we
patch in Gpg4win to verify the about data file and load
it as an QSettings file. This removes the blocking
verification of the AboutData file we currently have.

The settings are stored for later use in KleopatraApplication.

GnuPG-Bug-Id: T634
---
 src/aboutdata.cpp            | 116 ++++++++++++++++++++++++-----------
 src/kleopatraapplication.cpp |  12 ++++
 src/kleopatraapplication.h   |   5 ++
 src/main.cpp                 |   3 -
 src/mainwindow.cpp           |  22 -------
 5 files changed, 97 insertions(+), 61 deletions(-)

diff --git a/src/aboutdata.cpp b/src/aboutdata.cpp
index 9ee93ff41..be3ed2a43 100644
--- a/src/aboutdata.cpp
+++ b/src/aboutdata.cpp
@@ -14,10 +14,29 @@

 #include <Libkleo/GnuPG>

+#include <QCoreApplication>
 #include <QLocale>
+#include <QSettings>
+#include <QTextCodec>
+#include <QThread>
+
+#include "kleopatra_debug.h"
+#include "kleopatraapplication.h"

 #include <KLazyLocalizedString>
 #include <KLocalizedString>
+
+#include <KVerify>
+
+/* Path to GnuPGs signing keys relative to the GnuPG installation */
+#ifndef GNUPG_DISTSIGKEY_RELPATH
+#define GNUPG_DISTSIGKEY_RELPATH "/../share/gnupg/distsigkey.gpg"
+#endif
+/* Path to a VERSION file relative to QCoreApplication::applicationDirPath */
+#ifndef VERSION_RELPATH
+#define VERSION_RELPATH "/../VERSION"
+#endif
+
 static const char kleopatra_version[] = KLEOPATRA_VERSION_STRING;

 struct about_data {
@@ -46,16 +65,70 @@ static const about_data credits[] = {
     {kli18n("Laurent Montel"), kli18n("Qt5 port, general code maintenance"), "montel@kde.org", nullptr},
 };

+// Extend the about data with the used GnuPG Version since this can
+// make a big difference with regards to the available features.
+static void loadBackendVersions()
+{
+    auto thread = QThread::create([]() {
+        const auto backendVersions = Kleo::backendVersionInfo();
+        STARTUP_TIMING << "backend versions checked";
+        if (!backendVersions.empty()) {
+            QMetaObject::invokeMethod(qApp, [backendVersions]() {
+                auto about = KAboutData::applicationData();
+                about.setOtherText(i18nc("Preceeds a list of applications/libraries used by Kleopatra", "Uses:") //
+                                   + QLatin1String{"<ul><li>"} //
+                                   + backendVersions.join(QLatin1String{"</li><li>"}) //
+                                   + QLatin1String{"</li></ul>"} //
+                                   + about.otherText());
+                KAboutData::setApplicationData(about);
+            });
+        }
+    });
+    QObject::connect(thread, &QThread::finished, thread, &QThread::deleteLater);
+    STARTUP_TIMING << "checking backend versions";
+    thread->start();
+}
+
+// This code is mostly for Gpg4win and GnuPG VS-Desktop so that they
+// can put in their own about data information.
+static void loadCustomAboutData()
+{
+    auto verifier = new KVerify();
+    verifier->setGPGVSearchPaths(QStringList() << Kleo::gnupgInstallPath());
+    const QString versionFile = QCoreApplication::applicationDirPath() + QStringLiteral(VERSION_RELPATH);
+    const QString distSigKeys = Kleo::gnupgInstallPath() + QStringLiteral(GNUPG_DISTSIGKEY_RELPATH);
+
+    QObject::connect(verifier, &KVerify::verificationDone, [versionFile, verifier](bool valid, const QString &out, const QString &err) {
+        STARTUP_TIMING << "Version info checked";
+        if (valid) {
+            qCDebug(KLEOPATRA_LOG) << "Found valid VERSION file. Updating about data.";
+            auto settings = std::make_shared<QSettings>(versionFile, QSettings::IniFormat);
+            settings->setIniCodec(QTextCodec::codecForName("UTF-8"));
+            settings->beginGroup(QStringLiteral("Kleopatra"));
+            auto about = KAboutData::applicationData();
+            about.updateFromSettings(settings.get());
+            KAboutData::setApplicationData(about);
+            KleopatraApplication::instance()->setDistributionSettings(settings);
+        } else {
+            if (out.isEmpty() && err.isEmpty()) {
+                qCDebug(KLEOPATRA_LOG) << "Found no VERSION file.";
+            } else {
+                qCDebug(KLEOPATRA_LOG) << "gpgv stdout:" << out << "gpgv stderr:" << err;
+            }
+        }
+        verifier->deleteLater();
+        loadBackendVersions();
+    });
+
+    STARTUP_TIMING << "Verifying version info";
+    verifier->startGPGVerification(versionFile, versionFile + QStringLiteral(".sig"), distSigKeys);
+}
+
 AboutData::AboutData()
     : KAboutData(QStringLiteral("kleopatra"),
-                 (Kleo::brandingWindowTitle().isEmpty() ? i18n("Kleopatra") : Kleo::brandingWindowTitle()),
-#ifdef Q_OS_WIN
-                 Kleo::gpg4winVersion(),
-                 Kleo::gpg4winDescription(),
-#else
+                 i18n("Kleopatra"),
                  QLatin1String(kleopatra_version),
                  i18n("Certificate Manager and Unified Crypto GUI"),
-#endif
                  KAboutLicense::GPL,
                  i18n("(c) 2002 Steffen\u00A0Hansen, Matthias\u00A0Kalle\u00A0Dalheimer, Klar\u00E4lvdalens\u00A0Datakonsult\u00A0AB\n"
                       "(c) 2004, 2007, 2008, 2009 Marc\u00A0Mutz, Klar\u00E4lvdalens\u00A0Datakonsult\u00A0AB") //
@@ -64,9 +137,6 @@ AboutData::AboutData()
                      + QLatin1Char('\n') //
                      + i18n("(c) 2010-%1 The Kleopatra developers, g10 Code GmbH", QStringLiteral("2023")))
 {
-#ifdef Q_OS_WIN
-    setOtherText(Kleo::gpg4winLongDescription());
-#endif
     using ::authors;
     using ::credits;
     for (unsigned int i = 0; i < sizeof authors / sizeof *authors; ++i) {
@@ -82,31 +152,5 @@ AboutData::AboutData()
                   QLatin1String(credits[i].web));
     }

-    /* For Linux it is possible that kleo is shipped as part
-     * of a Gpg4win based Appimage with according about data. */
-    if (Kleo::gpg4winSignedversion()) {
-        setVersion(Kleo::gpg4winVersion().toUtf8());
-        setShortDescription(Kleo::gpg4winDescription());
-        setOtherText(Kleo::gpg4winLongDescription());
-
-        /* Bug reporting page is only available in german and english */
-        if (QLocale().uiLanguages().first().startsWith(QStringLiteral("de"))) {
-            setBugAddress("https://gnupg.com/vsd/report.de.html");
-        } else {
-            setBugAddress("https://gnupg.com/vsd/report.html");
-        }
-    } else {
-#ifdef Q_OS_WIN
-        setBugAddress("https://dev.gnupg.org/u/rgpg4win");
-#endif
-    }
-
-    const auto backendVersions = Kleo::backendVersionInfo();
-    if (!backendVersions.empty()) {
-        setOtherText(i18nc("Preceeds a list of applications/libraries used by Kleopatra", "Uses:") //
-                     + QLatin1String{"<ul><li>"} //
-                     + backendVersions.join(QLatin1String{"</li><li>"}) //
-                     + QLatin1String{"</li></ul>"} //
-                     + otherText());
-    }
+    loadCustomAboutData();
 }
diff --git a/src/kleopatraapplication.cpp b/src/kleopatraapplication.cpp
index ee0a8cc9b..3ae40f44a 100644
--- a/src/kleopatraapplication.cpp
+++ b/src/kleopatraapplication.cpp
@@ -66,6 +66,7 @@
 #include <QGraphicsEffect>
 #endif
 #include <QPointer>
+#include <QSettings>
 #include <QStyleOption>
 #include <QStylePainter>

@@ -216,6 +217,7 @@ public:
     std::shared_ptr<KeyCache> keyCache;
     std::shared_ptr<Log> log;
     std::shared_ptr<FileSystemWatcher> watcher;
+    std::shared_ptr<QSettings> distroSettings;

 public:
     void setupKeyCache()
@@ -831,4 +833,14 @@ void KleopatraApplication::startGpgAgent()
     Kleo::launchGpgAgent();
 }

+void KleopatraApplication::setDistributionSettings(std::shared_ptr<QSettings> settings)
+{
+    d->distroSettings = settings;
+}
+
+std::shared_ptr<QSettings> KleopatraApplication::distributionSettings()
+{
+    return d->distroSettings;
+}
+
 #include "kleopatraapplication.moc"
diff --git a/src/kleopatraapplication.h b/src/kleopatraapplication.h
index 4c863a0c6..6ce03b8d0 100644
--- a/src/kleopatraapplication.h
+++ b/src/kleopatraapplication.h
@@ -26,6 +26,7 @@ extern QElapsedTimer startupTimer;

 class MainWindow;
 class SysTrayIcon;
+class QSettings;

 class KleopatraApplication : public QApplication
 {
@@ -78,6 +79,10 @@ public:
     void restoreMainWindow();
     void openConfigDialogWithForeignParent(WId parentWId);

+    /* Add optional signed settings for specialized distributions */
+    void setDistributionSettings(std::shared_ptr<QSettings> settings);
+    std::shared_ptr<QSettings> distributionSettings();
+
 public Q_SLOTS:
     void openOrRaiseMainWindow();
     void openOrRaiseConfigDialog();
diff --git a/src/main.cpp b/src/main.cpp
index 90e65b2c7..409b5f671 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -154,9 +154,6 @@ int main(int argc, char **argv)

     AboutData aboutData;
     KAboutData::setApplicationData(aboutData);
-    /* This is more expensive as it sounds as it might run a verification
-     * on a signed Version file and initializes the whole GpgME::Engine. */
-    STARTUP_TIMING << "Versions checked";

     if (Kleo::userIsElevated()) {
         /* This is a safeguard against bugreports that something fails because
diff --git a/src/mainwindow.cpp b/src/mainwindow.cpp
index a836bf37f..4bb8c62e5 100644
--- a/src/mainwindow.cpp
+++ b/src/mainwindow.cpp
@@ -455,28 +455,6 @@ MainWindow::Private::Private(MainWindow *qq)
         });
     }

-    const auto title = Kleo::brandingWindowTitle();
-    if (!title.isEmpty()) {
-        QApplication::setApplicationDisplayName(title);
-    }
-
-    const auto icon = Kleo::brandingIcon();
-    if (!icon.isEmpty()) {
-        const auto dir = QDir(Kleo::gpg4winInstallPath() + QStringLiteral("/../share/kleopatra/pics"));
-        qCDebug(KLEOPATRA_LOG) << "Loading branding icon:" << dir.absoluteFilePath(icon);
-        QPixmap brandingIcon(dir.absoluteFilePath(icon));
-        if (!brandingIcon.isNull()) {
-            auto w = new QWidget;
-            auto hl = new QHBoxLayout;
-            auto lbl = new QLabel;
-            w->setLayout(hl);
-            hl->addWidget(lbl);
-            lbl->setPixmap(brandingIcon);
-            toolbar->addSeparator();
-            toolbar->addWidget(w);
-        }
-    }
-
     // Disable whats this as the vast majority of things does not have whats this
     // set in Kleopatra.
 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
diff --git a/src/view/welcomewidget.cpp b/src/view/welcomewidget.cpp
index e7dcbef20..808df2259 100644
--- a/src/view/welcomewidget.cpp
+++ b/src/view/welcomewidget.cpp
@@ -13,8 +13,7 @@

 #include "htmllabel.h"

-#include <Libkleo/GnuPG>
-#include <version-kleopatra.h>
+#include <KAboutData>

 #include <QAction>
 #include <QHBoxLayout>
@@ -115,11 +114,7 @@ public:

         const QString welcome = i18nc("%1 is version",
                                       "Welcome to Kleopatra %1",
-#ifdef Q_OS_WIN
-                                      Kleo::gpg4winVersion());
-#else
-                                      QStringLiteral(KLEOPATRA_VERSION_STRING));
-#endif
+                                      KAboutData::applicationData().version());
         const QString introduction = i18n("Kleopatra is a front-end for the crypto software <a href=\"https://gnupg.org\">GnuPG</a>.");

         const QString keyExplanation = i18n("For most actions you need either a public key (certificate) or your own private key.");
--
2.42.1
