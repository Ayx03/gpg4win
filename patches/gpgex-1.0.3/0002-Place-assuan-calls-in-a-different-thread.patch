#! /bin/sh
patch -p1 -l -f $* < $0
exit $?

From 423092437aade400521b7bb8d3d28085a93f4228 Mon Sep 17 00:00:00 2001
From: Andre Heinecke <aheinecke@intevation.de>
Date: Thu, 10 Mar 2016 11:38:11 +0100
Subject: [PATCH 2/2] Place assuan calls in a different thread

* src/client.cc (client_t::call_assuan): Use call_assuan_async. Void.
 (call_assuan_async): New. To be used in CreateThread.

--
Using a different thread makes sense here as starting the uiserver
can take a while and the return value was ignored anyway.

This also fixes interaction with Kleopatra from Qt5 as the
wId handling code Kleopatra uses to make the explorer the
parent Window utilizes SendMessage calls which resulted in
a deadlock.
---
 src/client.cc | 64 +++++++++++++++++++++++++++++++++++++++++++----------------
 src/client.h  |  2 +-
 2 files changed, 48 insertions(+), 18 deletions(-)

diff --git a/src/client.cc b/src/client.cc
index 58be03b..ebf82a8 100644
--- a/src/client.cc
+++ b/src/client.cc
@@ -410,20 +410,29 @@ uiserver_connect (assuan_context_t *ctx, HWND hwnd)
   return TRACE_GPGERR (rc);
 }

+typedef struct async_arg
+{
+  const char *cmd;
+  vector<string> filenames;
+  HWND wid;
+} async_arg_t;

-bool
-client_t::call_assuan (const char *cmd, vector<string> &filenames)
+static DWORD WINAPI
+call_assuan_async (LPVOID arg)
 {
+  async_arg_t *async_args = (async_arg_t *)arg;
   int rc = 0;
   int connect_failed = 0;
+  const char *cmd = async_args->cmd;
+  const vector<string> filenames = async_args->filenames;

   assuan_context_t ctx = NULL;
   string msg;

-  TRACE_BEG2 (DEBUG_ASSUAN, "client_t::call_assuan", this,
-	      "%s on %u files", cmd, filenames.size ());
+  TRACE_BEG2 (DEBUG_ASSUAN, "client_t::call_assuan_async", 0,
+              "%s on %u files", cmd, filenames.size ());

-  rc = uiserver_connect (&ctx, this->window);
+  rc = uiserver_connect (&ctx, async_args->wid);
   if (rc)
     {
       connect_failed = 1;
@@ -434,23 +443,23 @@ client_t::call_assuan (const char *cmd, vector<string> &filenames)
     {
       /* Set the input files.  We don't specify the output files.  */
       for (unsigned int i = 0; i < filenames.size (); i++)
-	{
-	  msg = "FILE " + escape (filenames[i]);
+        {
+          msg = "FILE " + escape (filenames[i]);

-	  (void) TRACE_LOG1 ("sending cmd: %s", msg.c_str ());
+          (void) TRACE_LOG1 ("sending cmd: %s", msg.c_str ());

-	  rc = assuan_transact (ctx, msg.c_str (),
-				NULL, NULL, NULL, NULL, NULL, NULL);
-	  if (rc)
-	    goto leave;
-	}
+          rc = assuan_transact (ctx, msg.c_str (),
+                                NULL, NULL, NULL, NULL, NULL, NULL);
+          if (rc)
+            goto leave;
+        }

       /* Set the --nohup option, so that the operation continues and
-	 completes in the background.  */
+         completes in the background.  */
       msg = ((string) cmd) + " --nohup";
       (void) TRACE_LOG1 ("sending cmd: %s", msg.c_str ());
       rc = assuan_transact (ctx, msg.c_str (),
-			    NULL, NULL, NULL, NULL, NULL, NULL);
+                            NULL, NULL, NULL, NULL, NULL, NULL);
     }
   catch (std::bad_alloc)
     {
@@ -484,10 +493,31 @@ client_t::call_assuan (const char *cmd, vector<string> &filenames)
                   gpgex_server::ui_server? gpgex_server::ui_server:"",
                   gpgex_server::ui_server? ")":"",
                   gpg_strerror (rc));
-      MessageBox (this->window, buf, "GpgEX", MB_ICONINFORMATION);
+      MessageBox (async_args->wid, buf, "GpgEX", MB_ICONINFORMATION);
     }
+  delete async_args;
+  return 0;
+}

-  return rc ? false : true;
+void
+client_t::call_assuan (const char *cmd, vector<string> &filenames)
+{
+  TRACE_BEG (DEBUG_ASSUAN, "client_t::call_assuan", cmd);
+  async_arg_t * args = new async_arg_t;
+  args->cmd = cmd;
+  args->filenames = filenames;
+  args->wid = this->window;
+
+  /* We move the call in a different thread as the Windows explorer
+     is blocked until our call finishes. We don't want that.
+     Additionally Kleopatra / Qt5 SendsMessages to the parent
+     window provided in wid. Qt does this with blocking calls
+     so Kleopatra blocks until the explorer processes more
+     Window Messages and we block the explorer. This is
+     a deadlock. */
+  CreateThread (NULL, 0, call_assuan_async, (LPVOID) args, 0,
+                NULL);
+  return;
 }

 
diff --git a/src/client.h b/src/client.h
index 81fdfd6..8d08cd9 100644
--- a/src/client.h
+++ b/src/client.h
@@ -34,7 +34,7 @@ class client_t
  private:
   HWND window;

-  bool call_assuan (const char *cmd, vector<string> &filenames);
+  void call_assuan (const char *cmd, vector<string> &filenames);

  public:
   client_t (HWND window_handle)
--
2.1.4
