m4_dnl -*-html-*-
m4_include(`template.m4')
m4_dnl $Id$

m4_define(`DE')
m4_dnl m4_define(`EN_FILE', `build-installer-on-win.html')
PAGE_START

<h1>Bau von Gpg4win unter Windows XP/SP2 via Debian 'Etch' in QEMU</h1>

<p><b>
Bau von Gpg4win-Installations-Paketen unter MS Windows XP/SP2 
mithilfe eines virtuellen GNU/Linux-Systems.
</b></p>

<p>
Tipps: <a href="build-installer-de.html">Bauen unter
GNU/Linux etwas detaillierter beschrieben</a> und
<a href="build-installer-on-win-debian-screenshots-de.html">Installation von Debian GNU/Linux 'Etch' 4.0 innerhalb einer virtuellen QEMU-Maschine als Screenshot-Serie illustriert</a>.
</p>

<h2>Inhalt</h2>

<p>
<a href="#intro">Einleitung</a><br><br>
<tt>I   - </tt><a href="#I">Installation von Debian GNU/Linux 'Etch' 4.0 in einer virtuellen Umgebung</a><br>
<tt>I-1 - </tt><a href="#I-1">Installation von QEMU</a><br>
<tt>I-2 - </tt><a href="#I-2">Installation von PuTTY</a><br>
<tt>I-3 - </tt><a href="#I-3">Bezug eines Debian 'Etch' Boot-Mediums</a><br>
<tt>I-4 - </tt><a href="#I-4">Öffnen einer CMD-Shell</a><br>
<tt>I-5 - </tt><a href="#I-5">Erzeugen eines Festplatten-Images</a><br>
<tt>I-6 - </tt><a href="#I-6">Starten der Etch-Installation</a><br>
<tt>I-7 - </tt><a href="#I-7">Abschluss der Etch-Installation</a>
<br><br>
<tt>II   - </tt><a href="#II">Bauen von Gpg4win</a><br>
<tt>II-1 - </tt><a href="#II-1">Starten der virtuellen Maschine</a><br>
<tt>II-2 - </tt><a href="#II-2">Installation der für den Bau von Gpg4win wichtigen Pakete</a><br>
<tt>II-3 - </tt><a href="#II-3">Bau der Gpg4win-Installations-Pakete</a><br>
<tt>II-4 - </tt><a href="#II-4">Extraktion der fertigen Installationspakete</a>
<br><br>
<a href="#references">Referenzen (URLs)</a>
</p>


<h2><a name="intro"></a>Einleitung</h2>

<p>
 Der Bauprozess von Gpg4win ist auf eine Cross-Kompilierung unter
 GNU/Linux ausgerichtet. Die Schaffung einer geeigenten Bauumgebung
 unter Windows XP/SP2 ist zwar prinzipiell möglich, erfordert aber
 umfassende Anpassungsarbeiten an den in Gpg4win integrierten Modulen.
 Wesentlich einfacher ist die Installation eines virtualisierten
 GNU/Linux Systems innerhalb von Windows, in dem der Bauprozess
 dann durchgeführt werden kann.
</p>

<p>
 In dieser Anleitung wird beschrieben, wie mit Freier Software
 ein derartiges virtuelles GNU/Linux für Windows XP SP2
 aufgesetzt und zur Erzeugung der Installationspakete genutzt werden kann.
 Als virtuelle Maschine kommt
 das unter GNU GPL stehende QEMU 0.9.0 <a href="#ref1">[1]</a> zum Einsatz.
 Als GNU/Linux-Distribution
 wird Debian 'Etch' 4.0 <a href="#ref2">[2]</a> benutzt.
</p>

<p>
 Die Anleitung gliedert sich in zwei Teile. Der erste Teil beschreibt,
 wie man unter Windows die Virtualiserungssoftware QEMU installiert, eine
 virtuelle Festplatte erzeugt und auf dieser ein minimales Debian 'Etch'
 installiert. Im zweiten Teil wird erläutert, wie der eigentliche Bauprozess
 innerhalb der virtuellen Maschine ablaufen sollte. Dieser entspricht
 dem bereits dokumentierten Bauprozess unter GNU/Linux, wird
 aber der Vollständigkeit halber hier noch einmal aufgeführt.
</p>

<h3><a name="I"></a>I - Installation von Debian GNU/Linux 'Etch' 4.0 in einer virtuellen Umgebung</h3>

<p>
 Resultat dieses Abschnittes wird eine Datei sein, die ein virtuelles
 Festplatten-Image eines rudimentären Debian 'Etch' auf Ihrem Windows XP
 enthalten wird.
 Die finale Image-Datei wird ungefähr 250MB groß sein.
 Insgesamt  sollte man für diese Phase der Installation mindestens 1,5GB
 freien Festplattenplatz auf dem Host-Windows-System zur Verfügung haben.
</p>

<h4><a name="I-1"></a> I-1 - Installation von QEMU</h4>

<p>
 QEMU ist eigentlich ein Hardware-Emulator. Mit anderen Worten,
 er interpretiert den Maschinen-Code des simulierten Gast-Systems
 und führt ihn auf dem Host-System aus. Dies würde es u.a. auch
 ermöglichen, den Bau von Gpg4win-Paketen auf einen PPC-System
 unter Mac OS X-Host durchzuführen. Für den Fall einer Installation
 unter MS Windows auf einer x86-Architektur empfiehlt es sich,
 neben dem eigentlichen Emulator noch die Virtualisierungskomponente
 QEMU Accelerator (KQEMU) zu installieren. Sie sorgt für eine direkte
 Ausführung des Maschinen-Codes des Gasts- auf dem Host-System, was
 die Auführung enorm beschleunigt, sofern das Gast-System ebenfalls
 eine x86-Architektur aufweisst.
</p>

<p>
 Auf der "QEMU for Windows" <a href="#ref3">[3]</a> Seite finden sich fertige
 Installations-Binaries für QEMU <a href="#ref4">[4]</a> und
 KQEMU <a href="#ref5">[5]</a>.
 Nach dem Herunterladen müssen die beiden Binaries einfach
 ausgeführt werden, um sie zu installieren.
 Bitte merken Sie sich den Pfad zur QEMU-Installation
 (z.B. also: C:\Programme\QEMU).
</p>


<h4><a name="I-2"></a>I-2 - Installation von PuTTY</h4>

<p>
 Um Daten zwischen Host- und Gast-System austauschen zu können,
 existieren mehrere Möglichkeiten. In dieser Anleitung wird vorgeschlagen,
 auf dem Gast-System einen OpenSSH-Server zu installieren. Um mit diesem
 kommunizieren zu können, wird eine entsprechende Client-Software benötigt.
 PuTTY <a href="#ref6">[6]</a> ist hierfür gut geeignet. Ein Windows-Installer
 findet sich unter <a href="#ref7">[7]</a>.
 Auch hier wird die Installation durch das Ausführen der
 Datei gestartet. Es ist empfehlenswert, nach der Installation die
 PATH-Variable um den Pfad hin zur Putty-Installation zu erweitern.
 Später wird von den Programmen putty.exe und pscp.exe Gebrauch gemacht.
</p>

<h4><a name="I-3"></a>I-3 - Bezug eines Debian 'Etch' Boot-Mediums</h4>

<p>
 Für das Herunterladen der für den Bau von Gpg4win
 notwendigen Pakete wird ohnehin eine schnelle Internet-Verbindung
 vorausgesetzt. Von daher reicht es aus, sich das minimale
 x86-Netz-Installations-Image debian-40r0-i386-netinst.iso (159MB)
 oder gar das kleinere Business-Card-Image
 debian-40r0-i386-businesscard.iso (32MB) zu besorgen und den Rest
 des Debian-Systems bei der Installation aus dem Netz nachzuladen.
 Das Net-Image ist unter <a href="#ref8">[8]</a> und das Business-Image unter
 <a href=#ref9">[9]</a>
 oder alternativ über die entsprechenden Debian-Mirrors zu finden.
</p>

<p>
 Es ist nicht nötig, diese Images auf eine CD zu brennen,
 da QEMU auch direkt von ihnen booten kann. 
</p>

<h4><a name="I-4"></a> I-4 - Öffnen einer CMD-Shell</h4>

<p>
 Im Start-&gt;Ausführen...-Dialog "cmd" eingeben und bestätigen.
 In der CMD-Shell folgendes eingeben:
</p>

<pre>
   cd /d &lt;Arbeitsverzeichnis&gt;
   QEMU=C:\Programme\Qemu
   set PATH=%QEMU%;%PATH%
</pre>

<p>
 Wobei &lt;Arbeitsverzeichnis&gt; das Verzeichnis sein sollte,
 in dem das Festplatten-Abbild erstellt werden soll. Z.B. C:\temp
</p>

<h4><a name="I-5"></a>I-5 - Erzeugen eines Festplatten-Images</h4>

<p>
 In der offenen CMD-Shell folgendes eingeben:
</p>

<pre>

   qemu-img create -f qcow2 install.img 2500M

</pre>

<p>
 Dies legt eine virtuelle Festplatten-Datei der Maximalgröße
 2500MB an. Die Datei wird erst bei Bedarf Schritt für
 Schritt vergrößert.
</p>

<h4><a name="I-6"></a>I-6 - Starten der Etch-Installation</h4>

<p>
 In der offenen CMD-Shell folgendes in einer Zeile eingeben
</p>

<pre>

   qemu -k de -m 256 -boot c -L %QEMU%\pc-bios -hda install.img
        -cdrom debian-40r0-i386-businesscard.iso -kernel-kqemu

</pre>

<p>
 Dies startet einen virtuellen PC mit 256MB, der vom
 Netz-Installations-Image bootet und die eben erzeugte virtuelle
 Festplatte zugewiesen bekommt. Der Pfad zum Boot-Image
 sollte natürlich angepasst werden. Die "-k de"-Option wählt das
 deutsche Tastatur-Layout. Die "-kernel-kqemu"-Option aktiviert
 die vollständige Virtualisierung des emulierten System, was die
 Performanz drastisch erhöht. Wenn man während des Bootens
 Meldungen der Form "hda: lost interrupt" bekommt, sollte man
 zusätzlich die Option "-no-acpi" in obigem Aufruf ergänzen.
 Sollte es darüber hinaus unerwarteter Weise zu
 Problemen mit der virtuellen Maschine kommen, sollte die
 Flagge "-kernel-kqemu" entfernt werden. Details hierzu finden sich
 in der Dokumentation zu QEMU.
</p>

<p>
 Es sollte nun in einem sich neu öffnenden Fenster der
 Boot-Prompt der Debian-Installation zu sehen sein. Diese
 kann durch Betätigen der Return-Taste gestartet werden.
 Die Installation sollte minimal gehalten werden. Nach
 Wahl der Sprache sollte die komplette virtuelle Festplatte
 für die Installation benutzt werden. Eine ext3-Partion+Swap
 reichen für unsere Zwecke völlig aus.
 Die Standard-Netzwerk-Konfiguration reicht ebenfalls aus.
</p>

<p>
 Neben dem root-Nutzer sollte ein Benutzerkonto "gpg4win" angelegt werden.
 Über dieses Benutzerkonto wird der eigentlich Bauprozess abgewickelt.
</p>

<h4><a name="I-7"></a>I-7 - Abschluss der Etch-Installation</h4>

<p>
 Es sollte die aktuellen Sicherheits-Updates mit
 'apt-get update &amp;&amp; apt-get upgrade' eingespielt werden.
</p>

<p>
 Optional für das Erstellen eines wiederverwendbaren Images:
 'apt-get clean; apt-get auto-clean' zum Löschen gecachter
 Downloads aufrufen.
</p>

<p>
 Das Gast-System kann jetzt mit 'shutdown -h now' heruntergefahren
 werden.
</p>

<p>
 Will man ein wiederverwendbares Basis-Image erzeugen, bietet es sich
 an, das Image zu bereinigen und transparent zu komprimieren.
 Der Zeitpunkt (damit ist der Umfang des Images gemeint) zu dem Sie ein Basis-Image
 erzeugen wollen, müssen Sie,
 abhängig davon ob Sie Gpg4win dauerhaft oder nur zum ausprobieren auf
 Windows bauen, selbst bestimmen.
 Dies kann auf der CMD-Shell mit folgenden Befehlen durchgeführt werden.
</p>

<pre>

   qemu-img convert -f qcov2 install.img -O qcow2 -c temp.img
   copy temp.img install.img

</pre>

<p>
 Eine Kopie dieses Images sollte man verwahren und regelmäßig
 mit Sicherheits-Updates versorgen.
</p>

<h3><a name="II"></a>II - Bauen von Gpg4win</h3>


<h4><a name="II-1"></a>II-1 - Starten der virtuellen Maschine</h4>

<p>
 In der offenen CMD-Shell bitte in einer Zeile folgendes eingeben:
</p>

<pre>

   qemu -redir tcp:5555::22 -m 256 -boot c -L %QEMU%\pc-bios
        -hda install.img -kernel-kqemu

</pre>

<p>
 Die "-redir"-Option sorgt dafür, dass TCP-Anfragen an den
 Host-Port 5555 an den Gast-Port 22 (SSH) weitergeleitet werden.
 Die Firewall von Windows-XP wird ggf. fragen, ob der Port 5555
 geblockt werden soll. Dies kann man bestätigen, wenn man nur
 vom eigenen Rechner aus auf die virtuelle Maschine zugreifen
 möchte. Andernfalls sollte man die Anfragen durchlassen.
</p>

<h4><a name="II-2"></a>II-2 - Installation der für den Bau von Gpg4win wichtigen Pakete</h4>

<p>
 Nach dem Booten sollte man als root-Benutzer folgendes
 nachinstallieren, bzw. mit 'apt-get update &amp;&amp; apt-get upgrade'
 auf den neusten Stand bringen:
</p>

<pre>

   apt-get install \
     subversion autoconf automake gettext \
     mingw32 nsis stow unzip texinfo imagemagick \
     libglib2.0-dev tetex-bin tetex-extra gs-common hyperlatex \
     make bzip2 gcc openssh-server

</pre>

<p>
 Subversion wird nur benötigt, wenn man Gpg4win aus dem SVN
 bauen will. Der OpenSSH-Server erleichtert die Kommunikation
 mit der virtuellen Maschine. Zum einen kann man sich nach
 der Installation mit PuTTY in den Rechner einwählen und zum
 anderen mit pscp Dateien aus dem System heraus und hinein kopieren.
 Ersteres stellt eine erhebliche Bedienungs-Verbesserung
 (z.B. Copy &amp; Paste) da,  letzteres ermöglicht die Extraktion
 der fertigen Installationspakete.
</p>

<p>
 Hat man den OpenSSH-Server im Gast und PuTTY auf dem Host-System
 installiert, kann man sich mit PuTTY in den Gast einloggen.
 Die Verbindungsdaten lauten Host: gpg4win@localhost, Port: 5555.
 Das Passwort im Fall des vorgefertigten Images lautet 'gpg4win'.
</p>

<p>
 Um Probleme mit dem Locale zu vermeiden, ist es empfehlenswert,
 das de_DE-Locale zu generieren. Hierzu als root-Nutzer
 bitte folgendes eingeben
</p>

<pre>

  dpkg-reconfigure locales

</pre>

<p>
 und das Häckchen zusätzlich bei de_DE setzen.
</p>

<h4><a name="II-3"></a>II-3 - Bau der Gpg4win-Installations-Pakete</h4>

<p>
 Man logge sich als 'gpg4win' Nutzer ein und gebe auf
 der Linux-Shell folgendes ein, wenn man Gpg4win aus
 dem SVN bauen will:
</p>

<pre>

  export LANG=de_DE
  svn co https://svn.wald.intevation.org/svn/gpg4win/trunk
  cd trunk/packages
  sh download.sh
  cd ..
  ./autogen.sh
  ./configure --enable-maintainer-mode --host=i586-mingw32msvc
  make

</pre>

<p>
 Nach dem dies erfolgreich durchgelaufen ist, stehen unter
 trunk/src die fertigen Installationspakete zur Verfügung.
</p>

<h4><a name="II-4"></a>II-4 - Extraktion der fertigen Installationspakete</h4>

<p>
 Auf dem Windows-Host-System in einer offenen CMD-Shell
 folgendes eingeben:
</p>

<pre>

  pscp -P 5555 gpg4win@localhost:trunk/src/gpg4win-*.exe .

</pre>

<p>
 Es wird vorausgesetzt, dass sich pscp.exe im PATH befindet.
 Nachdem der Transfer erfolgreich abgeschlossen wurde, kann
 das Gast-Linux-System heruntergefahren werden.
</p>

<h2><a name="references"></a>Referenzen (URLs)</h2>

<tt>
<a name="ref1">[1]</a> <a href="http://fabrice.bellard.free.fr/qemu/">http://fabrice.bellard.free.fr/qemu/</a> <br>
<a name="ref2">[2]</a> <a href="http://www.debian.org/">http://www.debian.org/</a> <br>
<a name="ref3">[3]</a> <a href="http://www.h7.dion.ne.jp/~qemu-win/">http://www.h7.dion.ne.jp/~qemu-win/</a> <br>
<a name="ref4">[4]</a> <a href="http://www.h6.dion.ne.jp/~kazuw/qemu-win/Qemu-0.9.0-install.exe">http://www.h6.dion.ne.jp/~kazuw/qemu-win/Qemu-0.9.0-install.exe</a> <br>
<a name="ref5">[5]</a> <a href="http://www.h6.dion.ne.jp/~kazuw/qemu-win/Kqemu-1.3.0pre11-install.exe">http://www.h6.dion.ne.jp/~kazuw/qemu-win/Kqemu-1.3.0pre11-install.exe</a> <br>
<a name="ref6">[6]</a> <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty">http://www.chiark.greenend.org.uk/~sgtatham/putty</a> <br>
<a name="ref7">[7]</a> <a href="http://www.tartarus.org/~simon/putty-snapshots/x86/putty-installer.exe">http://www.tartarus.org/~simon/putty-snapshots/x86/putty-installer.exe</a> <br>
<a name="ref8">[8]</a> <a href="http://cdimage.debian.org/debian-cd/4.0_r0/i386/iso-cd/debian-40r0-i386-netinst.iso">http://cdimage.debian.org/debian-cd/4.0_r0/i386/iso-cd/debian-40r0-i386-netinst.iso</a> <br>
<a name="ref9">[9]</a> <a href="http://cdimage.debian.org/debian-cd/4.0_r0/i386/iso-cd/debian-40r0-i386-businesscard.iso">http://cdimage.debian.org/debian-cd/4.0_r0/i386/iso-cd/debian-40r0-i386-businesscard.iso</a> <br>
</tt>
